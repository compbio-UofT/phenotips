<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>PhenoTips</web>
  <name>Export</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>PhenoTips.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1341433524000</creationDate>
  <date>1341890547000</date>
  <contentUpdateDate>1341890547000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include document="PhenoTips.ExportQueryMacro" /}}

{{velocity wiki="true"}}{{{
#if ($request.count)
  $patients.size()
#else
  $response.addHeader("Content-disposition", "attachment; filename=phenotips_${xwiki.formatDate($util.date, 'yyyy-MM-dd_HH-mm')}.csv")##
  $response.setContentType('text/csv')##
  #set ($newline = ' ')
  #set ($newline = "${newline.charAt(0).toChars(13)[0]}${newline.charAt(0).toChars(10)[0]}")
  #set ($codeProperties = ['phenotype', 'negative_phenotype', 'prenatal_phenotype', 'omim_id'])
  #set ($enabledFields = $request.getParameterValues('columns'))
  #set ($displayedFields = [])
  #foreach ($field in $activeFields)
    #if ($enabledFields.contains($field))
      #set ($discard = $displayedFields.add($field))
    #elseif ($codeProperties.contains($field) &amp;&amp; ($enabledFields.contains("${field}_code") || $enabledFields.contains("${field}_combined") || $enabledFields.contains("${field}_code_meta") || $enabledFields.contains("${field}_meta")))
      #set ($discard = $displayedFields.add($field))
    #end
  #end
  #if ($enabledFields.contains('doc.name'))Report ID,#end
  #if ($enabledFields.contains('referrer'))Referrer,#end
  #if ($enabledFields.contains('creationDate'))Date,#end
  #if ($enabledFields.contains('author'))Last modified by,#end
  #if ($enabledFields.contains('date'))Last modification date,#end
  #foreach ($field in $displayedFields)
    #if ($codeProperties.contains($field) &amp;&amp; $enabledFields.contains("${field}_code"))
      "${targetClass.get($field).prettyName} (code)"##
      #if ($enabledFields.contains($field) || $enabledFields.contains("${field}_combined") || $enabledFields.contains("${field}_meta") || $enabledFields.contains("${field}_code_meta")),#end
    #end
    #if ($enabledFields.contains($field))
      "${targetClass.get($field).prettyName}"##
      #if ($enabledFields.contains("${field}_combined") || $enabledFields.contains("${field}_meta") || $enabledFields.contains("${field}_code_meta")),#end
    #end
    #if ($codeProperties.contains($field) &amp;&amp; $enabledFields.contains("${field}_combined"))
      "${targetClass.get($field).prettyName} (code and name)"##
      #if ($enabledFields.contains("${field}_meta") || $enabledFields.contains("${field}_code_meta")),#end
    #end
    #if ($codeProperties.contains($field) &amp;&amp; $enabledFields.contains("${field}_code_meta"))
      "${targetClass.get($field).prettyName} (code, with metadata)"##
      #if ($enabledFields.contains("${field}_meta")),#end
    #end
    #if ($codeProperties.contains($field) &amp;&amp; $enabledFields.contains("${field}_meta"))
      "${targetClass.get($field).prettyName} (with metadata)"##
    #end
    #if ($foreach.hasNext)##
      ,##
    #end
  #end
  ${newline}##
  #foreach ($patient in $patients)
    #set ($patientDoc = $xwiki.getDocument($patient))
    #set ($patientObj = $patientDoc.getObject($targetClassName))
    #if ($patientDoc &amp;&amp; $patientObj)
     #if ($enabledFields.contains('doc.name'))${patientDoc.documentReference.name},#end
     #if ($enabledFields.contains('referrer'))${xwiki.getUserName($patientDoc.creator, false)},#end
     #if ($enabledFields.contains('creationDate'))$!{xwiki.formatDate($patientDoc.creationDate, 'MM/dd/yyyy')},#end
     #if ($enabledFields.contains('author'))${xwiki.getUserName($patientDoc.author, false)},#end
     #if ($enabledFields.contains('date'))$!{xwiki.formatDate($patientDoc.date, 'MM/dd/yyyy')},#end
     #foreach ($field in $displayedFields)
       #if ($codeProperties.contains($field))
         #if ($enabledFields.contains("${field}_code"))
           "##
           #foreach ($code in $!patientObj.getProperty($field).value)
             $code##
             #if ($foreach.hasNext)
               ${newline}##
             #end
           #end
           "##
           #if ($enabledFields.contains($field) || $enabledFields.contains("${field}_combined") || $enabledFields.contains("${field}_meta") || $enabledFields.contains("${field}_code_meta")),#end
         #end
         #if ($enabledFields.contains($field))
           "##
           #foreach ($code in $!patientObj.getProperty($field).value)
             #if ($field.endsWith('phenotype'))
               #set ($name = $!{services.ontologies.resolveTerm($code).name})
               #if ($name)
                 ${name.replace('"', '""')}##
               #else
                 ${code.replace('"', '""')}##
               #end
             #else
               ${services.omim.get($code).name.replace('"', '""')}##
             #end
             #if ($foreach.hasNext)
               ${newline}##
             #end
           #end
           "##
           #if ($enabledFields.contains("${field}_combined") || $enabledFields.contains("${field}_meta") || $enabledFields.contains("${field}_code_meta")),#end
         #end
         #if ($enabledFields.contains("${field}_combined"))
           "##
           #foreach ($code in $!patientObj.getProperty($field).value)
             #if ($field.endsWith('phenotype'))
               #if ($code.startsWith('HP:'))[${code}] #end
               #set ($name = $!{services.ontologies.resolveTerm($code).name})
               #if ($name)
                 ${name.replace('"', '""')}##
               #else
                 ${code.replace('"', '""')}##
               #end
             #else
               [${code}] ${services.omim.get($code).name.replace('"', '""')}##
             #end
             #if ($foreach.hasNext)
               ${newline}##
             #end
           #end
           "##
           #if ($enabledFields.contains("${field}_meta") || $enabledFields.contains("${field}_code_meta")),#end
         #end
         #if ($enabledFields.contains("${field}_code_meta"))
           "##
           #foreach ($code in $!patientObj.getProperty($field).value)
             ${code.replace('"', '""')}##
             #if ($field.endsWith('phenotype'))
               #findPhenotypeMetadata()
               #if ($meta)
                 #set ($ageMeta = $meta.getProperty('age_of_onset').value)
                 #if ("$!{ageMeta}" != '')
                   ; ${ageMeta}##
                 #end
                 #set ($paceMeta = $meta.getProperty('pace_of_progression').value)
                 #if ("$!{paceMeta}" != '')
                   ; ${paceMeta}##
                 #end
               #end
             #end
             #if ($foreach.hasNext)
               ${newline}##
             #end
           #end
           "##
           #if ($enabledFields.contains("${field}_meta")),#end
         #end
         #if ($enabledFields.contains("${field}_meta"))
           "##
           #foreach ($code in $!patientObj.getProperty($field).value)
             #if ($field.endsWith('phenotype'))
               #set ($name = $!{services.ontologies.resolveTerm($code).name})
               #if ($name)
                 ${name.replace('"', '""')}##
               #else
                 ${code.replace('"', '""')}##
               #end
               #findPhenotypeMetadata()
               #if ($meta)
                 #set ($ageMeta = $meta.getProperty('age_of_onset').value)
                 #if ("$!{ageMeta}" != '')
                   ; ${services.ontologies.resolveTerm($ageMeta).name}##
                 #end
                 #set ($paceMeta = $meta.getProperty('pace_of_progression').value)
                 #if ("$!{paceMeta}" != '')
                   ; ${services.ontologies.resolveTerm($paceMeta).name}##
                 #end
               #end
             #else
               ${services.omim.get($code).name.replace('"', '""')}##
             #end
             #if ($foreach.hasNext)
               ${newline}##
             #end
           #end
           "##
         #end
       #else
         #set ($value = $!patientObj.getProperty($field).value)
         #if ("$!value.getTime()" != '')
           #set ($format = $services.recordConfiguration.activeConfiguration.dateOfBirthFormat)
           "$!{xwiki.formatDate($value, $format)}"##
         #elseif ("$!value.size()" != '')
           "##
           #foreach ($line in $value)
             $!{line.replace('"', '""')}##
             #if ($foreach.hasNext)
               ${newline}##
             #end
           #end
           "##
         #elseif ("$!targetClass.get($field).classType" == 'Boolean')
           #if ($value == 1)Yes##
           #elseif ($value == 0)No##
           #else-##
           #end
         #elseif ("$!targetClass.get($field).classType" == 'Users')
           #if ($stringtool.isNotBlank($value))
             "$!{xwiki.getUserName($value, false).replace('"', '""')}"##
           #end
         #elseif ("$!{targetClass.get($field).classType}" == 'TextArea')
           "$!{services.rendering.render($services.rendering.parse($value, $patientDoc.getSyntax().toIdString()), "plain/1.0").replace('"', '""')}"##
         #else
           #set($displayedValue = "$!{patientObj.display($field, 'view')}")
           #if ($displayedValue.startsWith('{{html'))
             "$!{value.replace('"', '""')}"##
           #else
             "$!{displayedValue.replace('"', '""')}"##
           #end
         #end
       #end
       #if ($foreach.hasNext)##
         ,##
       #end
     #end
     ${newline}##
    #end## Patient is accessible
  #end
#end
}}}
{{/velocity}}</content>
</xwikidoc>
