<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>ClinicalInformationCode</web>
<name>PatientSheetUI</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>ClinicalInformationCode.PatientClass</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1323751780000</creationDate>
<date>1324319943000</date>
<contentUpdateDate>1324319943000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>5ec4907f-5197-4bd5-aa8d-18396012e126</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  var deleteTool = $('tmActionDelete');
  if (!deleteTool) {
    return false;
  }
  deleteTool.observe('click', function(clickEvent) {
    clickEvent.stop();
    var item = clickEvent.element(); 
    item.blur();
    if (item.disabled) {
      // Do nothing if the button was already clicked and it's waiting for a response from the server.
      return;
    } else {
      var url = item.readAttribute('href') + "?confirm=1&amp;form_token=$!{services.csrf.getToken()}" + (Prototype.Browser.Opera ? "" : "&amp;ajax=1");
      new XWiki.widgets.ConfirmedAjaxRequest(
        /* Ajax request URL */
        url,
        /* Ajax request parameters */
        {
          onCreate : function() {
            // Disable the button, to avoid a cascade of clicks from impatient users
            item.disabled = true;
          },
          onSuccess : function() {
            // Go to space WebHome
            window.location = new XWiki.Document('WebHome', XWiki.Document.currentSpace).getURL('view');
          },
          onFailure : function() {
            // Better luck next time!
            item.disabled = false;
          }
        },
        /* Interaction parameters */
        {
          confirmationText: "$msg.get('core.recyclebin.confirm')"
        }
      );
    }
  });
});</code>
</property>
<property>
<name>Confirmed AJAX deletion</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>1</number>
<className>XWiki.JavaScriptExtension</className>
<guid>b9d3abcd-397a-423d-a1f6-b5b9ca6db51b</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>var tocLinkClicked = function(event) {
    event.stop();
    var trigger = event.findElement('a');
    var targetName = trigger &amp;&amp; trigger.getAttribute('href');
    var target = targetName &amp;&amp; $(targetName.substring(1));
    var parent = target &amp;&amp; (target.up('.collapsible-group') || target.up('.chapter'));
    if (parent &amp;&amp; parent.hasClassName('collapsed')) {
       parent.removeClassName('collapsed');
       if (parent.down('.expand-tool')) {
         parent.down('.expand-tool').update('â–¼');
       }
       if (parent.up('.chapter')) {
         parent.up('.chapter').removeClassName('collapsed');
       }
       parent.scrollTo();
    } else {
       target.scrollTo();
    }
};

document.observe('xwiki:dom:loaded', function() {
  var tocElement = $('table-of-contents')
  if (!tocElement) {return;}
  var titleLink = tocElement.down('li a');//first link
  if (titleLink) {
    titleLink.href = '#document-title';
  }
  var crtContents = tocElement.down('ul ul');
  if (!crtContents) {return;}
  var completeContents = new Element('ul');
  var crtContainer = completeContents;
  var crtLevel = 2;
  $$('h2[id], h3[id]').each(function(title) {
    var target = title.id;
    var myLevel = parseInt(title.nodeName.substring(1));
    var tocLine = new Element('li').update(new Element('a', {'href' : '#' + target}).update(title.innerHTML));
    if (myLevel &lt; crtLevel) {
       crtContainer = crtContainer.up('ul');
    } else if (myLevel &gt; crtLevel) {
      var lastTocLine = crtContainer.down('li:last-child');
      if (!lastTocLine) {
        lastTocLine = new Element('li');
        crtContainer.insert({'bottom' : lastTocLine});
      }
      crtContainer = new Element('ul');
      lastTocLine.insert({'bottom' : crtContainer});
    }
    crtLevel = myLevel;
    crtContainer.insert({'bottom' : tocLine});
  });
  crtContents.replace(completeContents);

  // JS show/hide of ToC, to avoid jumps in Chrome
  var tocTrigger = $('tmToC');
  if (tocTrigger) {
    tocTrigger.observe('click', function(event) {
      event.stop();
      tocElement.style.display= 'block';
      tocElement.style.visibility= 'visible';
    });
  }
  var tocHideTriggers = tocElement.select('.hide-toc a');
  tocHideTriggers.invoke('observe', 'click', function(event) {
     event.stop();
     tocElement.style.display= '';
     tocElement.style.visibility= 'hidden';
  });
  var tocLinks = tocElement.select('ul a');
  tocLinks.invoke('observe', 'click', function(event) {
     //tocElement.style.display= '';
     //tocElement.select('.hide-toc a').click();
     tocLinkClicked(event);
  });
});</code>
</property>
<property>
<name>Fix for the incomplete ToC</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>2</number>
<className>XWiki.JavaScriptExtension</className>
<guid>5d84bae3-f15f-41cd-b99b-5e0a2bbf27d4</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>var highlightChecked = function(element) {
      var subsection = element.up('.subsection');
      if (subsection) {
	var subsectionTitle = subsection.previous('label.section');
      }
      if (element.checked) {
        element.up('label').addClassName('selected');
	if (subsectionTitle) {
	  subsectionTitle.addClassName('selected');
	}
      } else {
        element.up('label').removeClassName('selected');
	if (subsectionTitle &amp;&amp; !(subsectionTitle.next('.subsection') &amp;&amp; subsectionTitle.next('.subsection').down('.selected'))) {
	  subsectionTitle.removeClassName('selected');
	}
      }
      if (element.id == element.name + '_' + element.value) {
        Event.fire(document, 'phenotype:selected', {
              key : element.value,
              text: element.title || element.nextSibling.nodeValue || element.nextSibling.firstChild.nodeValue,
              enable: element.checked
        });
      }
};
var enableHighlightChecked = function(element) {
      highlightChecked(element);
      ['click', 'change', 'suggest:change'].each(function(eventName) {
        element.observe(eventName, highlightChecked.bind(element,element));
      });
};

var restoreCategory = function (element) {
  var parentElement = element.up('.accepted-suggestions li');
  var selector = '';
  var ignoredCategories = this.suggest &amp;&amp; this.suggest.options &amp;&amp;
          this.suggest.options.queryProcessor &amp;&amp; this.suggest.options.queryProcessor.restriction &amp;&amp;
          this.suggest.options.queryProcessor.restriction.term_category;
  if (parentElement) {
    parentElement.select('.term-category input[type=hidden]').each(function (item) {
      if (ignoredCategories &amp;&amp; ignoredCategories.indexOf(item.value) &gt;= 0) return;
      selector += 'input.suggested[name^=' + element.name + '] + input[type=hidden][name=_category][value*=' + item.value +'], '
    });
  }
  var matchingCategory = document.documentElement.down(selector);
  if (matchingCategory) {
    var matchingList = matchingCategory.previous('ul.accepted-suggestions');
    if (matchingList) {
      matchingList.insert(parentElement);
    }
  }
  enableHighlightChecked(element);
  if (typeof (this.ensureVisible) == 'function') {
    this.ensureVisible(element, true);
  } else {
    element.scrollTo();
  }
}

var findPropertyField = function(name) {
  if ($('prefix'))
    return $($('prefix').value + name);
  return null;
}

var findFormElementForPhenotype = function(id) {
  return $($('prefix').value + 'phenotype_' + id);
};

var isPhenotypeSelected = function (id) {
  var elt = findFormElementForPhenotype(id);
  return (elt &amp;&amp; elt.checked);
};
var unselectPhenotype = function (id) {
  var targetElt = findFormElementForPhenotype(id);
  if (targetElt &amp;&amp; targetElt.checked) {
    targetElt.click();
  }
};

document.observe('dom:loaded', function() {
    $$('.editbody .negative_phenotype-group .phenotypes-main').invoke('insert', {'before' : new Element('div', {'class' : 'infomessage'}).update("Add here any relevant phenotypic description that was verified and proved absent for this patient.")});
    $$('.negative_phenotype-group h3').each(function(title) {
      title.update(title.innerHTML.replace(" NOT ", " &lt;em&gt;NOT&lt;/em&gt; "));
    });

    // ------------------------------------------------------------------------
    // Selected term highlighting 
    $$('label.term-label input[type=checkbox]').each(function (input) {
      enableHighlightChecked(input);
      input.observe('click', function(event) {
          $$('input[type=checkbox][value=' + event.element().value +']').each(function(item) {
            if (item.checked != event.element().checked) {
              item.click();
            }
          });
      });
    });
    
  // ------------------------------------------------------------------------
  // Behavior of the quick search box

  var qsBox = $('quick-search-box');
  if (qsBox) {
    var content = qsBox.next('div');
    if (content) {
      qsBox.__x_qsInput = qsBox.down('input[type=text]') || {};
      var qsSticky = new StickyBox(qsBox, content, {isSticky : function(element) {return !element.__x_qsInput._activeSuggest} });
      Event.observe(document, 'ms:suggest:containerCreated', function(event) {
        if (event.memo.suggest.fld == qsBox.__x_qsInput) {
          qsBox.__x_qsInput._activeSuggest = true;
          if (qsSticky.isFixed()) {
            qsSticky.makeAbsolute((document.viewport.getScrollOffsets().top - content.cumulativeOffset().top) + qsSticky.options.shadowSize);
          }
          var qsSuggest = event.memo.container;
          qsSuggest.style.top = (qsBox.__x_qsInput.cumulativeOffset().top + qsBox.__x_qsInput.getHeight()) + 'px';
          qsSuggest.style.left = qsBox.__x_qsInput.cumulativeOffset().left;
          //qsSuggest.style.marginTop = '1.6em';
        }
      });
      Event.observe(document, 'ms:suggest:clearSuggestions', function(event) {
        if (event.memo.suggest.fld == qsBox.__x_qsInput) {
          qsBox.__x_qsInput._activeSuggest = false;
          qsSticky.resetPosition();
        }
      });
    }
  }

  var docContent = $('mainContentArea');
  if (docContent) {
    docContent.style.position = 'relative';

    var docActions = $('document-actions');
    if (docActions) {
      docActions.addClassName('absolute');
      var daSticky  = new StickyBox(docActions, docContent, {shadowSize : 6});
    }

    var toc = $('table-of-contents');
    if (toc) {
      toc.addClassName('absolute');
      var tocSticky = new StickyBox(toc, docContent, {shadowSize : 6});
    }
  }
});</code>
</property>
<property>
<name>Form behavior</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>3</number>
<className>XWiki.JavaScriptExtension</className>
<guid>a0b2957f-46c1-4784-a861-b38d168c29b1</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('dom:loaded', function() {

    // Only do this in edit mode:
    if (!$('inline')) {return;}

    // ------------------------------------------------------------------------
    // Enable value-controlled visibility

    var visibilityControllers = $$('.controlled-group .controller input[type=checkbox]');

    var controlVisibility = function(controller) {
      if (typeof (controller.element) == 'function') {
         return controlVisibility(controller.element());
      }
      if (!controller.__controlled) {
        controller.__controlled = controller.up('.controlled-group').select('.controlled');
      }
      if (controller.checked) {
         controller.__controlled.invoke('setStyle', controller.__hideStyle);
      } else {
         controller.__controlled.invoke('setStyle', controller.__showStyle);
      }
    }

    visibilityControllers.each(function (item) {
       if (item.up('.controlled-group.complete-hide')) {
          item.__hideStyle = {'display' : 'none'};
          item.__showStyle = {'display' : ''};
       } else {
          item.__hideStyle = {'visibility' : 'hidden'};
          item.__showStyle = {'visibility' : 'visible'};
       }
       controlVisibility(item);
       item.observe('change', controlVisibility);
    });

    // ------------------------------------------------------------------------
    // Live validation of the date of birth
    
    var hasErrors = false;
    
    var markIfHasErrors = function(inputHasErrors, input) {
      if (!input) {
        return false;
      }
      var label = null;
      if (input.id) {
        label = input.up('.mandatory').down("label[for=" + input.id + "]");
        if (!label) {
          label = input.up('.mandatory').down("label");
        }
      }
      if (inputHasErrors) {
        input.addClassName('wrongValue');
        if (label) {
          label.addClassName('wrongValue');
        }
        return true;
      } else {
        input.removeClassName('wrongValue');
        if (label) {
          label.removeClassName('wrongValue');
        }
        return false;
      }
    }
    
    $$('.mandatory input[type=text]:not(.suggested, .mapping)').invoke('observe', 'blur', function (event) {
      var input = event.element();
      markIfHasErrors((!input.value || input.value.strip() == ""), input);
    });
    
    // ------------------------------------------------------------------------
    // Prevent form submission if there's missing data

    try {
    $('inline').observe('submit', function(event) {
      var form = event.element();
      var hasErrors = false;
    
      $$('.mandatory *:not(.exclude) input[type=text]:not(.suggested, .mapping)').each(function (input) {
        hasErrors = markIfHasErrors((!input.value || input.value.strip() == ""), input) || hasErrors;
      });

      var hasVal = new Object();
      var titles = new Object();

      $$('.mandatory *:not(.exclude) input[type=checkbox], .mandatory *:not(.exclude) input[type=radio]').each(function (input) {
        hasVal[input.name] = hasVal[input.name] || (input.value != '' &amp;&amp; input.checked);
        titles[input.name] = input.up('.mandatory').down('.group-title');
      });
      for (var inputName in hasVal) {
         if (!hasVal[inputName]) {
           hasErrors = true;
	   if (titles[inputName]) {
	     titles[inputName].addClassName('wrongValue');
	   }
	 } else {
	   if (titles[inputName]) {
	     titles[inputName].removeClassName('wrongValue');
	   }
	 }
      }
      
      if (hasErrors) {

        // ------------------------------------------------------------------------
        // The data has errors. Prevent submission and show fields with errors
	if (!form.down('div.errormessage')) {
	   form.insert({'top' : new Element('div', {'class' : 'errormessage'}).update("Some mandatory fields are missing or have incorrect values.")});
	}
	form.scrollTo();
        event.stop();
      } else {

        // ------------------------------------------------------------------------
        // Everything looks fine.
        // Update the data to be submitted

        var __updateNewValues = function(section) {
           var target = section.down('input.mapping');
           if (target) {
             var value = '';
             var newValueInputs = section.select('.accepted-suggestions input[type=checkbox]');
             for (var i = 0; i &lt; newValueInputs.length; ++i) {
                if (newValueInputs[i].checked) {
                  value += newValueInputs[i].value + '|';
                }
             }
             var otherValuesInput = section.down('input[type=text].suggested.accept-value');
             if (otherValuesInput) {
               var otherValues = otherValuesInput.value;
               if (otherValuesInput.hasClassName('multi')) {
                 otherValues = otherValues.replace(/\s*,\s*/g, "|");
               }
               value += otherValues;
             }
             target.value = value;
           }
        }
        form.select('.phenotype-group').each(__updateNewValues);
        form.select('.prenatal_phenotype-group').each(__updateNewValues);
        form.select('.negative_phenotype-group').each(__updateNewValues);
      }
    });
    } catch (error) { /* No form? No problem */ }
});</code>
</property>
<property>
<name>Form validation</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>4</number>
<className>XWiki.JavaScriptExtension</className>
<guid>5bef4aa8-4f23-4e20-b54e-54f918c3d219</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('dom:loaded', function() {
    var jumpToPubmed = function(termID) {
       var label = termID.up('label');
       var li = label.up('li');
       var url = "http://www.ncbi.nlm.nih.gov/pubmed?term=" + termID.value;
       var link = new Element('a', {'target': '_blank', 'title' : "See this article on pubmed", 'href' : url});
       label.wrap(link);
       $('pubmed-search-history').down('ul').insert({'top' : li});
       window.open(url);
       $('pubmed-search-history').down('h4').removeClassName('hidden');
    }
    // ------------------------------------------------------------------------
    // Creation of suggest widgets
    
    // hpo: namespace:medical_genetics
    // go : namespace:
    var suggestionsMapping = {
        "hpo" : {
            script: "$xwiki.getURL('ClinicalInformationCode.SolrService', 'get')?",
            queryProcessor: typeof(MS.widgets.SolrQueryProcessor) == "undefined" ? null : new MS.widgets.SolrQueryProcessor({
                           'name' : { 'stub': true, 'boost': 50 },
                           'synonym' : { 'stub': true, 'boost': 50 },
                           'text' : { 'stub': true, 'default': true },
                           'id' : {'activationRegex' : 'HP:[0-9]+', 'stub': true, 'boost' : 50}
                         }, {
                           'term_category': ['HP:0000118']
                         }),
            varname: "q",
            noresults: "No matching terms",
            json: true,
            resultsParameter : "rows",
            resultId : "id",
            resultValue : "name",
            resultCategory : "term_category",
            resultInfo : {
                           "Definition"    : {"selector"  : "def",
                                              "processor" : function(text) { return text.replace(/\s*\n\s*/, ' ').replace(/`([^`]+)`\s+\(([A-Z]+:[0-9]+)`?\)/g, '&lt;em title="$2"&gt;$1&lt;/em&gt;'); }
                                             },
                           "Synonyms"      : {"selector"  : "synonym"},
		           "Related terms" : {"extern" : true,
		                              "processor" : function(trigger) {
							      trigger._obrowser = new MS.widgets.OntologyBrowser(this, null, {
								 isTermSelected : isPhenotypeSelected,
								 unselectTerm : unselectPhenotype
							      });
							      trigger.observe('click', function(event){
								event.stop();
								event.element()._obrowser.show(
								  event.element().up('.suggestItem').down('.suggestId').firstChild.nodeValue
								);
							      }.bindAsEventListener(this));
							    }
			                      }
                         },
            enableHierarchy: true,
            resultParent : "is_a",
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        },
        "omim" : {
            script: "$xwiki.getURL('ClinicalInformationCode.OmimService', 'get')?outputSyntax=plain&amp;",
            varname: "q",
            noresults: "No matching terms",
            json: true,
            resultsParameter : "rows",
            resultId : "id",
            resultValue : "Title",
            resultInfo : {
                           "Locus"      : {"selector"  : "Locus"}
                         },
            enableHierarchy: false,
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        },
        "pubmed" : {
            script: "$xwiki.getURL('ClinicalInformationCode.PubMedService', 'get')?",
            varname: "q",
            noresults: "No matching articles",
            json: true,
            resultsParameter : "rows",
            resultId : "id",
            resultValue : "Title",
            resultInfo : {
                           "Authors"   : {"selector"  : "AuthorList"},
                           "Date"      : {"selector"  : "EPubDate"},
                           "Journal"   : {"selector"  : "Source"}
                         },
            enableHierarchy: false,
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        }
    };
    var pickerSpecialClassOptions = {
      'defaultPicker' : {},
      'generateShortList' : {
                  'showKey' : true,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox'
                },
      'generateCheckboxes' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox',
                  'listInsertionElt' : '.label-other',
                  'listInsertionPosition' : 'before',
                  'onItemAdded' : enableHighlightChecked,
                  'acceptFreeText' : true
                },
      'quickSearch' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox',
                  'listInsertionElt' : $(document.documentElement).down('.phenotype-info .phenotype-group:last-child .phenotypes-main'),
                  'listInsertionPosition' : 'top',
                  'silent' : true,
                  'onItemAdded' : restoreCategory
                },
      'portal' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : false,
                  'enableSort' : false,
                  'showClearTool' : true,
                  'inputType': 'checkbox',
                  'listInsertionElt' : $('pubmed-search-history'),
                  'listInsertionPosition' : 'bottom',
                  'silent' : true,
                  'onItemAdded' : jumpToPubmed
                }
    }
    // -----------------------------------------------------------------
    // Create and attach the suggests
    // -----------------------------------------------------------------
    if (typeof(MS.widgets.Suggest) != "undefined") {
      var keys = Object.keys(suggestionsMapping);
      var specialClasses = Object.keys(pickerSpecialClassOptions);
      for (var i = 0; i &lt; keys.length; i++) {
        var selector = 'input.suggest-' + keys[i];
        $$(selector).each(function(item) {
          if (!item.hasClassName('initialized')) {
            item._customOptions = Object.clone(suggestionsMapping[keys[i]]);
            item._restriction = item.up('.phenotype-group')
            if (item._restriction) {
              item._restriction = item._restriction.down('input[name=_category]');
              if (item._restriction &amp;&amp; item._restriction.value.strip() != '') {
                item._restriction = item._restriction.value.strip().split(",");
              } else {
                item._restriction = null;
              }
            }
            if (item._customOptions.queryProcessor &amp;&amp; item._restriction) {
              item._customOptions.queryProcessor = Object.clone(item._customOptions.queryProcessor);
	      item._customOptions.queryProcessor.restriction = {
                'term_category' : item._restriction
              }
            }
            // Create the Suggest.
            item._suggest = new MS.widgets.Suggest(item, item._customOptions);
            if (item.hasClassName('multi') &amp;&amp; typeof(MS.widgets.SuggestPicker) != "undefined") {
              var multiSuggestOptions = {};
              for (var j = 0; j &lt; specialClasses.length; j++) {
                if (item.hasClassName(specialClasses[j])) {
                  multiSuggestOptions = pickerSpecialClassOptions[specialClasses[j]];
                  break;
                }
              }
              var suggestPicker = new MS.widgets.SuggestPicker(item, item._suggest, multiSuggestOptions);
              item._suggestPicker = suggestPicker;

              // Integrate the custom fields
              // 1. find the container element displaying them
              var customFieldsContainer = suggestPicker.list.up().down('.custom-display-data');
              if (customFieldsContainer) {
                 // 2. get rid of the container
                 customFieldsContainer.remove();
                 // 3. find all the values and display them as part of the multi suggest picker
                 suggestPicker.silent = true;
                 customFieldsContainer.select('label input[type="checkbox"]').each(function(entry) {
                   suggestPicker.addItem(entry.value, entry.nextSibling.nodeValue, '', entry.up('label').next('.term-category'));
                 });
                 suggestPicker.silent = false;
              }
 
            }
            item.addClassName('initialized');
          }
        });
      }

      // ------------------------------------------------------------------------
      // Add dropdowns to all predefined elements
      $$('.phenotype-group, .prenatal_phenotype-info').each(function(group) {
        var sugestedInput = group.down('.suggested.multi');
        if (sugestedInput) {
          group.select('.phenotypes-main label.term-label &gt; input[type=checkbox]').each(function(item) {
            if (!item.up('.subsection')) {
            item._dropDown = new MS.widgets.DropDown(item.up('label'));
            item._ontologyBrowser = new MS.widgets.OntologyBrowser(
              sugestedInput._suggest,
              item._dropDown,
              {
                isTermSelected : isPhenotypeSelected,
                unselectTerm : unselectPhenotype,
                showParents: false,
                showRoot: false,
                defaultEntryAction: 'select',
                enableBrowse: false
              }
            );
            item._trigger = new Element('span', {'class' : 'expand-tool'}).update(item._ontologyBrowser._getExpandCollapseSymbol(true));
            item._trigger._source = item;
            item._trigger._root = item.up('label');
            item._trigger._root.insert({'top' : item._trigger});
            if (item._trigger._root.hasClassName('dropdown-root')) {
            item._trigger.observe('click', function(event) {
              event.stop();
              var trigger =  event.element();
              var source  =  trigger._source;
              var root    =  trigger._root;

              if (root._expanded) {
                source._ontologyBrowser.hide();
              } else {
                source._ontologyBrowser.show(source.value);
              }

              trigger.update(source._ontologyBrowser._getExpandCollapseSymbol(root._expanded));
              root._expanded = !root._expanded;
            });
            } else {
              item._trigger.addClassName('disabled');
            }
          }
          });
        }
      });

      // ------------------------------------------------------------------------
      // Sync dynamic subtree selections
      var fieldName = '';
      var source = '';
      var categories = '';
      var syncTermCategory = function(term) {
        var field = $(document.documentElement).down('label.term-label.dropdown-root input[type=checkbox][name=' + fieldName + '][value=' + term +']');
        if (field) {
          var subtermsInCategory = $$('label.accepted-suggestion[for^=' + fieldName + '_] + .term-category input[type=hidden][value=' + term + ']');
          var selectedSubterms  = 0;
          var countIfSelectedSubterm = function (categoryElement) {
            var subtermElement = categoryElement.up('li').down('label.accepted-suggestion input[type=checkbox]');
            if (subtermElement &amp;&amp; subtermElement.checked) {
              ++selectedSubterms;
            }
          };
          subtermsInCategory.each(countIfSelectedSubterm);
          if (selectedSubterms &gt; 0) {
            //if (source) {source.addClassName('invisible');}
            field.up('label').addClassName('subterm-selected');
            if (field._ontologyBrowser &amp;&amp; field._trigger &amp;&amp; field._trigger._root) {
              field._ontologyBrowser.show(field.value);
              field._trigger.update(field._ontologyBrowser._getExpandCollapseSymbol(false));
              field._trigger._root._expanded = true;
              var sourceInput = source &amp;&amp; source.down('input[type=checkbox]');
              if (sourceInput &amp;&amp; sourceInput.checked) {
                Event.observe(field._ontologyBrowser.container.contentContainer, 'obrowser:expand:finished', function(event) {
                  Event.stopObserving(field._ontologyBrowser.container.contentContainer, 'obrowser:expand:finished');
                  field._ontologyBrowser.expandTo(sourceInput.value, categories);
                });
              }
            }
          } else {
            field.up('label').removeClassName('subterm-selected');
          }
        }
      };
      document.observe('custom:selection:changed', function(event) {
        categories = event.memo &amp;&amp; event.memo.categories;
        source = event.memo &amp;&amp; event.memo.customElement;
        if (categories) {
          fieldName = event.memo.fieldName || '';
          categories.each(syncTermCategory);
        }
      });
    }
});</code>
</property>
<property>
<name>Term suggest</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>5</number>
<className>XWiki.JavaScriptExtension</className>
<guid>1ff4c592-3029-49ae-ac68-17e2cefcfb43</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>var ExtraData = (function (ExtraData) {
  var tools = ExtraData.tools = ExtraData.tools || {};
  tools.Editor = Class.create({
    initialize : function () {
      $$('.extradata-list a.delete').invoke('observe', 'click', this.ajaxDeleteData.bindAsEventListener(this));
      $$('.list-actions a.add').invoke('observe', 'click', this.ajaxAddData.bindAsEventListener(this));
    },
    ajaxDeleteData : function (event) {
      event.stop();
      var deleteTrigger = event.element();
      if (deleteTrigger.disabled) {
         return;
      }
      new XWiki.widgets.ConfirmedAjaxRequest(deleteTrigger.href, {
        onCreate : function() {
          deleteTrigger.disabled = true
        },
        onSuccess : function() {
          var dataRow = deleteTrigger.up('tr');
          var dataTable = deleteTrigger.up('table');
          if (dataRow) {
            dataRow.remove();
          }
          if (dataTable) {
            var i = 1;
            dataTable.select('th.row-count').each(function(item) {
              item.update((i++));
            });
          }
        },
        onComplete : function() {
          deleteTrigger.disabled = false;
        }
      },
      {
         confirmationText : "Are you sure you wish to delete this row?"
      });
    },
    ajaxAddData : function (event) {
      event.stop();
      var addTrigger = event.element();
      if (addTrigger.disabled) {
         return;
      }
      var classname = '';
      try {
        var classname = /classname=([^&amp;]+)/.exec(addTrigger.href)[1];
      } catch (err) {
         new XWiki.widgets.Notification('Cannot add data: type not found', 'error');
         return;
      }
      var dataTable = $('extradata-list-' + classname);
      if (!dataTable) {
        new XWiki.widgets.Notification("Cannot find the list to update " + classname, 'error');
      }
      var url = addTrigger.href.replace(/(&amp;xredirect=[^&amp;]*)/m, '$1' + encodeURIComponent('?&amp;xpage=plain&amp;xaction=lastentry&amp;dataClassName=' + classname + '&amp;withLabel=' + dataTable.hasClassName('withLabel')));
      new Ajax.Request(url, {
        onCreate : function() {
          addTrigger.disabled = true
          addTrigger._x_notif = new XWiki.widgets.Notification('Adding...', 'inprogress');
        },
        onSuccess : function (response) {
          addTrigger._x_notif.hide();
          var rowHead = '';
          if (dataTable.hasClassName('withCounter')) {
            var idx = dataTable.select('.row-count').size() + 1;
            rowHead = '&lt;th scope="row" class="row-count"&gt;' + idx + '&lt;/th&gt;';
          }
          dataTable.down('tbody').insert({'bottom' : '&lt;tr class="new"&gt;' + rowHead + response.responseText + '&lt;/tr&gt;'});
          var lastAdded = dataTable.down('.new');
          lastAdded.down('a.delete').observe('click', this.ajaxDeleteData.bindAsEventListener(this));
          lastAdded.removeClassName('new');
          Event.fire(dataTable, 'extradata:added', {'element' : lastAdded});
        }.bind(this),
        onFailure : function(response) {
          var failureReason = response.statusText;
          if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
            failureReason = 'Server not responding';
          }
          if (addTrigger._x_notif) {
            addTrigger._x_notif.replace(new XWiki.widgets.Notification("Failed: " + failureReason, "error"));
          } else {
            new XWiki.widgets.Notification(this.interactionParameters.failureMessageText + failureReason, "error");
          }
        },
        on1223 : function(response) {
          response.request.options.onSuccess(response);
        },
        on0 : function(response) {
          response.request.options.onFailure(response);
        },
        onComplete : function() {
          addTrigger.disabled = false
        }
      });
    }
  });
  return ExtraData;
}(ExtraData || {}));

document.observe('xwiki:dom:loaded', function() {
  new ExtraData.tools.Editor();
})</code>
</property>
<property>
<name>Add/Remove data associated with the patient report</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>6</number>
<className>XWiki.JavaScriptExtension</className>
<guid>297fd397-f8d7-47e4-b554-384046aaa007</guid>
<property>
<cache>forbid</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  // Only do this in edit mode
  if (XWiki.contextaction != 'edit') { return; }
  var form = $('edit') || $('inline');
  if (!form) {return; }
  var formToken = form.form_token &amp;&amp; form.form_token.value;

  // What the form initially looked like
  var originalFormData = form.serialize();

  // Warn users when they navigate away from this page without submitting the form, if the data changed
  /*window.onbeforeunload = function(uEvent) {
    if (originalFormData != form.serialize()) {
      return "There are unsaved changes on this page. Are you sure you wish to leave?";
    }
  };
  form.observe('submit', function(event) {
     window.onbeforeunload = function() {};
  });*/

  // Obtain the number of the loaded version
  var originalVersion = ($$("meta[name=version]").length &gt; 0) ? $$("meta[name=version]")[0].content : false;

  // What could happen on cancel:
  var __getRollbackURL = function (version) {
    return XWiki.currentDocument.getURL('rollback', 'rev=' + version + "&amp;confirm=1&amp;form_token=" + formToken);
  }
  var deleteURL =  XWiki.currentDocument.getURL('delete', "confirm=1&amp;form_token=" + formToken);
  var NEW_DOCUMENT = 'none';

  if (originalVersion) {
     var cancelURL = __getRollbackURL(originalVersion);
  }

  var versionProviderURL = XWiki.currentDocument.getRestURL();
  var __getDocumentVersionFromREST = function(xml) {
    var version = xml.getElementsByTagName('version');
    if (version.length &gt; 0) {
       return version[0].firstChild.nodeValue;
    }
    return false;
  };

  // In background, check if the document actually exists; if not, it should be deleted on cancel
  // (non-existing documents have 1.1 in their meta version)
  new Ajax.Request(
            versionProviderURL, {
              method: 'get',
              onSuccess : function (response) {
                // only update if the information was unavailable in the meta section
                if (!originalVersion &amp;&amp; (originalVersion = __getDocumentVersionFromREST(response.responseXML))) {
                   cancelURL = __getRollbackURL(originalVersion);
                }
              },
              onFailure : function (response) {
                if (response.statusCode == 404) {
                   //Document missing
                   originalVersion = NEW_DOCUMENT;
                   cancelURL = deleteURL;
                }
              }.bind(this)
            }
      );

  //form.select('input[name=action_cancel]').invoke('stopOserving', 'click');
  form.select('input[name=action_cancel]').invoke('observe', 'click', function (event) {
    // Continue with the default behavior if the cancel action is being forced after form version verification
    // or if at this point we still have no information regarding the original document version
    if (form._isVersionVerified || !originalVersion || !cancelURL) { return; }
    Event.stop(event);
    // Find the current version
    new Ajax.Request(
            versionProviderURL,
            {
              method: 'get',
              onCreate : function() {
                form._isVersionVerified = true; 
              },
              onSuccess : function(response) {
                var crtVersion = __getDocumentVersionFromREST(response.responseXML);
                window.onbeforeunload = function() {};
                if (crtVersion &amp;&amp; crtVersion != originalVersion) {
                  // Go to the original state (i.e. rollback or delete)
                  window.location = cancelURL;
                } else {
                  //just cancel
                  event.element().click();
                }
              }.bind(this),
              onFailure : function (response) {
                window.onbeforeunload = function() {};
                // Fail silently
                event.element().click();
              }.bind(this),
              on0 : function (response) {
                response.request.options.onFailure(response);
              }
            }
      );
  });
});</code>
</property>
<property>
<name>Fix uncancellable object changes</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>7</number>
<className>XWiki.JavaScriptExtension</className>
<guid>c5e3eab9-1e8c-4935-a6f4-825937f81ec5</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  var dataTable = $('extradata-list-ClinicalInformationCode.MeasurementsClass');
  if (!dataTable || !dataTable.down('.actions')) {return;}

  var measurementsService = "$xwiki.getURL('ClinicalInformationCode.PatientToolsService', 'get')";
  var chartService = "$xwiki.getURL('ClinicalInformationCode.ChartService', 'get')";
  var chartContainer = $('charts')

  var createRowQueryString = function (row, forceParam) {
    var weight = row.down('td.weight input');
    var height = row.down('td.height input');
    var hc = row.down('td.head_circumference input');

    if (!weight || !height || !hc) {return '';}

    var date = row.down('td.date input');
    var birthDate = $(document.documentElement).down('input[name$=date_of_birth]');

    return createReqParam('w', weight, forceParam) +
           createReqParam('h', height, forceParam) +
           createReqParam('c', hc, forceParam) +
           createReqParamAge('a', date, birthDate, forceParam);
  }

  var createReqParam = function (name, sourceInput, forceParam) {
    var value = sourceInput &amp;&amp; sourceInput.value != '' &amp;&amp; parseFloat(sourceInput.value);
    if (value) {
      return '&amp;' + name + '=' + encodeURIComponent(value);
    }
    return forceParam &amp;&amp; ('&amp;' + name + '=') || '';
  }
  var createReqParamAge = function (name, crtDate, birthDate, forceParam) {
    if (!birthDate || !crtDate) {return ''}
    var bDateObj = Date.parseISO_8601(birthDate.alt || '');
    var cDateObj = Date.parseISO_8601(crtDate.alt || '');
    if (!bDateObj || !cDateObj) {return ''}
    var age = (cDateObj.getFullYear() - bDateObj.getFullYear()) * 12 + (cDateObj.getMonth() - bDateObj.getMonth());
    if (age &gt;= 0) {
      var displayedAge = '';
      if (age == 0) {
        displayedAge = '0';
      }
      var y = Math.floor(age / 12);
      var m = age % 12;
      if (y &gt; 0) {
        displayedAge = y + 'y ';
      }
      if (m &gt; 0) {
        displayedAge += m + 'm ';
      }
      var target = crtDate.up('tr') &amp;&amp; crtDate.up('tr').down('td.age');
      if (target) {
        if (target.down('input')) {
          target.down('input').value = age;
        }
        if (target.down('.displayed-value')) {
          target.down('.displayed-value').update(displayedAge);
        }
      }
    }
    return (age &gt;= 0) &amp;&amp; ('&amp;' + name + '=' + encodeURIComponent(age)) || forceParam &amp;&amp; ('&amp;' + name + '=') || '';
  }
  var createReqParamSex = function (name, sourceInput) {
    return (sourceInput &amp;&amp; sourceInput.value &amp;&amp; ('&amp;' + name + '=' + encodeURIComponent(sourceInput.value))) || '';
  }

  var getMostRecentEntry = function() {
    var mostRecentEntry;
    var mostRecentDate;
    dataTable.select('tr input.xwiki-date').each(function(element) {
      var date = Date.parseISO_8601(element.alt.strip());
      if (!mostRecentDate || mostRecentDate &lt; date) {
         mostRecentDate = date;
         mostRecentEntry = element.up('tr');
      }
    })
    return mostRecentEntry;
  }

  var updateValue = function (target, value, fuzzyValue) {
    var input = target.down('input[type=hidden]');
    var displayed = target.down('.displayed-value');
    input.value = value;
    displayed.update(value || '-');
    if (fuzzyValue) {
      ['extreme-below-normal', 'below-normal', 'normal', 'above-normal', 'extreme-above-normal'].each(function (cssClass) {
        displayed.removeClassName(cssClass);
      });
      displayed.addClassName(fuzzyValue);
    }
  } 

  var updateDependentValues = function (targets, values) {
    for (var p in values) {
      ['value', 'percentile'].each( function (value) {
        if (values[p] &amp;&amp; values[p][value] &amp;&amp; targets[p] &amp;&amp; targets[p][value]) {
           updateValue(targets[p][value], values[p][value], (value == 'percentile') &amp;&amp; values[p]['valCategory']);
           var target = targets[p];
           if (value == 'percentile' &amp;&amp; target['valueHooks'] &amp;&amp; getMostRecentEntry() == targets[p][value].up('tr')) {
             var targetElt = values[p]['valCategory'] &amp;&amp; target['valueHooks'][values[p]['valCategory']];
             if (targetElt &amp;&amp; !targetElt.checked) {
                 targetElt.checked = true;
                 highlightChecked(targetElt);
             }
             ['extreme-below-normal', 'extreme-above-normal'].without(values[p]['valCategory'] || '').each(function(val) {
                var elt = target['valueHooks'][val];
                if (elt &amp;&amp; elt.checked) {
                  elt.checked = false;
                  highlightChecked(elt);
                }
             });
           }
        }
      });
    }
  }

  var lastRequestID = 0;
  var lastChartRequestID = 0;

  var updateCharts = function(event) {
    var qs = '';
    dataTable.select('tr').each(function(row) {
      qs += createRowQueryString(row, true);
    })
    if (qs == '') {return;}
    var sex = $(document.documentElement).down('input[name$=gender]:checked');
    var url = chartService + "?" + qs + createReqParamSex('s', sex) + "&amp;width=" + chartContainer.getDimensions()['width'];

    var requestID = ++lastChartRequestID;

    var ajx = new Ajax.Request(url, {
       method: 'get',
       onSuccess: function(response) {
          if (requestID &lt; lastChartRequestID) {return;}
          chartContainer.update(response.responseText);
          __adjustAllSVGHeights();
       },
       onFailure: function (response) {}
    });
  }

  // ----------------------------------------------------------------------------
  // Workaround for webkit bug https://bugs.webkit.org/show_bug.cgi?id=68995
  // Inspired by http://www.brichards.co.uk/blog/webkit-svg-height-bug-workaround
  // (adapted from jQuery to Prototype.js)
  var __adjustSVGHeight = function(svgElt) {
     // Original width/height of the svg graphic: 952 X 1225
     svgElt.setStyle({ 'height' : (1225 / 952 * svgElt.getWidth()) + 'px'});

  }
  var __adjustAllSVGHeights = function() {
     chartContainer.select('.chart-wrapper').each(__adjustSVGHeight);
  }
  __adjustAllSVGHeights();
  Event.observe(window, 'resize', __adjustAllSVGHeights);
  // ----------------------------------------------------------------------------

  var valueChanged = function(event) {
    // Get inputs holding the values needed for computing the dependent values
    var row = event &amp;&amp; event.element &amp;&amp; event.element() &amp;&amp; event.element().up('tr');
    if (row) {
       updateDataRow(row);
    } else {
       dataTable.select('tr').each(updateDataRow);
    }
  }

  var updateDataRow = function(row) {
    var qs = createRowQueryString(row);
    if (qs == '') {return;}
    var sex = $(document.documentElement).down('input[name$=gender]:checked');

    var url = measurementsService + "?" + qs + createReqParamSex('s', sex);

    var targets = {
       bmi : {
         value : row.down('td.bmi'),
         percentile : row.down('td.bmi_percentile')
       },
       weight : {
         percentile : row.down('td.weight_percentile'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0004325'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0001513')
         }
       },
       height : {
         percentile : row.down('td.height_percentile'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0004322'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0000098')
         }
       },
       head_c : {
         percentile : row.down('td.hc_percentile'),
         valueHooks : {
           'extreme-below-normal': findFormElementForPhenotype('HP:0000252'),
           'extreme-above-normal': findFormElementForPhenotype('HP:0000256')
         }
       }
    };

    var requestID = ++lastRequestID;

    var ajx = new Ajax.Request(url, {
       method: 'get',
       requestHeaders: {Accept : "application/json"},
       onSuccess: function(response) {
          if (requestID &lt; lastRequestID) {return;}
          updateDependentValues(targets, response.responseJSON)
       },
       onFailure: function (response) {}
    });
  }

  // TODO: make sure events work on all browsers
  var handleValueChanged = function (elementsList) {
    ['blur', 'keypress', 'keyup', 'xwiki:date:changed'].each(function (eventName) {
      elementsList.invoke('observe', eventName, valueChanged);
    })
    if (chartContainer) {
      ['blur', 'xwiki:date:changed'].each(function (eventName) {
        elementsList.invoke('observe', eventName, updateCharts);
      })
    }
  };
  
  // Attach all listeners
  handleValueChanged(dataTable.select('input[type=text]'));
  handleValueChanged($$('input[name$=date_of_birth], input[name$=gender]'));
  dataTable.observe('extradata:added', function (event) {
     var elements = event &amp;&amp; event.memo &amp;&amp; event.memo.element &amp;&amp; event.memo.element.select('input[type=text]');
     if (elements) {
       handleValueChanged(elements);
       if (window.dateTimePicker) {
         window.dateTimePicker.attachPickers(event.memo.element);
       } else {
         var crtYear = new Date().getFullYear();
         window.dateTimePicker = new XWiki.widgets.DateTimePicker({year_range: [crtYear - 99, crtYear + 1]});
       }
     }
  });
});</code>
</property>
<property>
<name>Automatic computation of growth parameters</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>8</number>
<className>XWiki.JavaScriptExtension</className>
<guid>a31e57f0-1758-4b66-91e8-a7b6c818c57a</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  if (!$('inline')) {return;}

   $$('.chapter.phenotype-info .phenotype-group, .chapter.phenotype-info .negative_phenotype-group').invoke('addClassName', 'collapsible-group');

  $$('.chapter h2').each(function(item){
    var chapterShow = new Element('span', {'class' : 'tool show'}).update('Show');
    var chapterHide = new Element('span', {'class' : 'tool hide'}).update('Hide');
    var chapterExpandTools = new Element('span', {'class' : 'expand-tools'}).insert(chapterShow).insert(chapterHide);
    item.insert({after: chapterExpandTools});
    [chapterShow, chapterHide, item].invoke('observe', 'click', function (event) {
      event.element().up('.chapter').toggleClassName('collapsed');
    });
  });
  $$('.chapter:not(.patient-info)').each(function(item) {
     if (!item.down('input[type=checkbox]:checked') &amp;&amp; !item.down('.extradata-list td input[type=text]')) {
       item.addClassName('collapsed');
     }
  });

  var phChapterExpandAll = new Element('span', {'class' : 'tool expand-all'}).update('Expand all');
  var phChapterCollapseAll = new Element('span', {'class' : 'tool collapse-all'}).update('Collapse all');
  var phChapterJumpTo = new Element('span', {'class' : 'tool jump-to'}).update('Jump to');
  var phChapterExpandTools =
      new Element('span', {'class' : 'inner-expand-tools'}).insert(phChapterJumpTo).insert(" Â· ").insert(
                  phChapterExpandAll).insert(" Â· ").insert(phChapterCollapseAll).insert(" Â· ");

  var phChapterTocList = new Element('ul');
  var phChapterToc = new Element('div', {'class' : 'chapter-toc'}).insert(phChapterTocList);

  $$('.chapter.phenotype-info h2+.expand-tools').invoke('insert', {'top' : phChapterExpandTools});
  phChapterExpandTools.up().insert({'after' : phChapterToc});
  $$('.chapter.phenotype-info .collapsible-group h3').each(function(item) {
     phChapterTocList.insert(new Element('li').update(new Element('a', {'href' : '#' + item.getAttribute('id')}).update(item.innerHTML)));
     item.insert({'top': new Element('span', {'class' : 'expand-tool'}).update('â–¼')});
  });

  var toggleCategory = function(target) {
     if (!target) {return;}
     if (typeof (target.element) == 'function') {
       return toggleCategory(target.element());
     }
     var parent = target.up('.collapsible-group');
     if (parent) {
       parent.toggleClassName('collapsed');
       parent.down('.expand-tool').update(parent.hasClassName('collapsed') &amp;&amp; 'â–º' || 'â–¼');
     }
  }

  $$('.chapter.phenotype-info .collapsible-group h3').each(function(item){
     if (!item.up('.collapsible-group').down('input[type=checkbox]:checked')) {
       toggleCategory(item);
     } 
     item.observe('click', toggleCategory);
  });
  phChapterExpandAll.observe('click', function(event){
    event.element().up('.chapter').select('.collapsible-group.collapsed h3').each(function(item){
      toggleCategory(item);
    });
  });
  phChapterCollapseAll.observe('click', function(event){
    event.element().up('.chapter').select('.collapsible-group:not(.collapsed) h3').each(function(item){
      toggleCategory(item);
    });
  });
 
  phChapterToc.toggle();
  phChapterJumpTo.observe('click', function(event){
    phChapterToc.toggle();
  });
  phChapterToc.select('a').invoke('observe', 'click', function(event) {
    phChapterToc.toggle();
    tocLinkClicked(event);
  });
  
});</code>
</property>
<property>
<name>Expand/collapse categories</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>9</number>
<className>XWiki.JavaScriptExtension</className>
<guid>903e1899-539b-4242-8763-15b4dc6cabef</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {

  $$('.ncbi-search-box h3, .ncbi-search-box .expand-tools .tool').invoke('observe', 'click', function(event) {
     event.element().up('.ncbi-search-box').toggleClassName('collapsed');
  });
  //$$('.ncbi-search-box').invoke('toggleClassName' ,'collapsed');

  var defaultSearchTerms = $('defaultSearchTerms');
  var defaultSearchTermsInput = $('defaultSearchTermsInput');
  var customSearchTermsInput = $('customSearchTermsInput');

  var omimField = $('prefix') &amp;&amp; $($('prefix').value + 'omim_id');

  var services = {
    'omim' : {
       'script' : "$xwiki.getURL('ClinicalInformationCode.OmimService', 'get', 'format=html&amp;q=')",
       'target' : $('omim-search-results'),
       'suggestFor' : omimField
    },
    'pubmed' : {
       'script' : "$xwiki.getURL('ClinicalInformationCode.PubMedService', 'get', 'format=html&amp;q=')",
       'target' : $('pubmed-search-results')
    }
  };

  if (!defaultSearchTerms || !defaultSearchTermsInput || (!services.omim.target &amp;&amp; !services.pubmed.target)) {return;}

  var cache = {'all' : {}, 'displayed' : {}};

  var updateSearchValue = function() {
    var prevValue = defaultSearchTermsInput.value;
    defaultSearchTermsInput.value = '';
    defaultSearchTerms.select('.search-term:not(.disabled)').each(function(term) {
      defaultSearchTermsInput.value += ' "' + term.innerHTML + '"';
    });
    if (defaultSearchTermsInput.value != prevValue) {
      doSearch('omim');
      doSearch('pubmed');
    }
  }

  var updateDefaultSearchTerms = function() {
    var container = new Element('div', { 'class' : 'default-search-terms-container'});
    for (var k in cache.displayed) {
       var obj = cache.all[k];
       if (obj) {
          var elt = new Element('span', {'class' : 'search-term'}).update(obj.text);
          elt.__key = obj.key;
          elt.title = obj.disabled &amp;&amp; 'Click to enable' || 'Click to disable';
          if (obj.disabled) {
            elt.addClassName('disabled');
          }
          container.insert(elt);
          elt.observe('click', function(event) {
             var target = event.element();
             target.toggleClassName('disabled');
             cache.all[target.__key].disabled = target.hasClassName('disabled');
             target.title = cache.all[target.__key].disabled &amp;&amp; 'Click to enable' || 'Click to disable';
             updateSearchValue();
          })
       }
    }
    defaultSearchTerms.update(container);
    updateSearchValue();
  }

  var requestCreated = function(service, request) {
    service.target.up().addClassName('loading');
  }
  var responseReceived = function(service, request) {
    if (request &amp;&amp; request.getHeader('X-ReqNo') == service.expectedReqNo) {
      service.target.up().removeClassName('loading');
    } else {
      request.request.container = {};
    }
  }

  var updateDone = function(service) {
    if (service.suggestFor  &amp;&amp; service.suggestFor._suggestPicker) {
        service.target.select('li').each(function (item) {
          if (item.down('input[type=checkbox]')) {return;}
          var idElt = item.down('.id');
          var id = idElt &amp;&amp; idElt.title;
          var name = item.down('.title a') &amp;&amp; item.down('.title a').innerHTML;
          if (id &amp;&amp; name) {
            var trigger = new Element('input', {'type' :  'checkbox', 'value' : id, 'title' : 'Select'});
            var existingValue = $(service.suggestFor.id + '_' + id);
            if (existingValue &amp;&amp; existingValue.checked) {
              trigger.checked = true;
            }
            trigger.__suggestion = {'id' : id, 'value' : name};
            idElt.wrap('label');
            idElt.up('label').insert({'top' : trigger});
            trigger.observe('click', function(event) {
               var input = Event.findElement(event, 'input[type=checkbox]');
               if (input.checked) {
                 service.suggestFor._suggestPicker.silent = true;
                 service.suggestFor._suggestPicker.acceptSuggestion(input.__suggestion);
                 service.suggestFor._suggestPicker.silent = false;
                 new XWiki.widgets.Notification('The OMIM disease "' + input.__suggestion.value + '" was added to the patient\'s diagnosis.', 'done');
               } else {
                 var existingValue = $(service.suggestFor.id + '_' + input.value);
                 if (existingValue) {
                   existingValue.checked = false;
                   new XWiki.widgets.Notification('The OMIM disease "' + input.__suggestion.value + '" was removed from the patient\'s diagnosis.', 'done');
                 }
               }
            });
          } 
        });
    }
  };

  var doSearch = function(service) {
    var data = services[service];
    if (!data) {return;}
    if (!data.expectedReqNo) {
      data.expectedReqNo = 0;
    }
    var queryString = (customSearchTermsInput &amp;&amp; (customSearchTermsInput.value.strip() + ' ') || '') + defaultSearchTermsInput.value.strip();
    
    new Ajax.Updater(data.target, data.script + encodeURIComponent(queryString.strip()) + "&amp;reqNo=" + ++data.expectedReqNo, {onCreate : requestCreated.bind(this, data), onSuccess : responseReceived.bind(this, data), onComplete : updateDone.bind(this, data)});
  }

  document.observe('phenotype:selected', function(event) {
    if (!event.memo || !event.memo.key) {return;}
    var key = event.memo.key;
    var text = event.memo.text || event.memo.key;
    var obj = cache.all[key];
    if (event.memo.enable) {
      if (!obj) {
        obj = {'key' : key, 'text' : text};
        cache.all[key] = obj;
      } else {
        obj.hidden = false;
      }
      cache.displayed[key] = true;
    } else {
      if (obj) {
        obj.hidden = true;
        delete cache.displayed[key];
      }
    }
    updateDefaultSearchTerms();
  });

  if (customSearchTermsInput) {
    customSearchTermsInput.observe('keyup', function(event) {
       doSearch('omim');
       doSearch('pubmed');
    });
  }
});</code>
</property>
<property>
<name>Instant searches in the Diagnosis zone</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>10</number>
<className>XWiki.JavaScriptExtension</className>
<guid>e261844f-d2f2-4ac5-882a-10d7670949ca</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  $$('.month-year-date').each(function(dateWidget){
    var dateValueInput = dateWidget.down('input.xwiki-date-hidden');
    var monthSelect = dateWidget.down('select.month');
    var yearSelect = dateWidget.down('select.year');
    if (!dateValueInput || !dateValueInput.title || !monthSelect || !yearSelect) {return;}
    [monthSelect, yearSelect].invoke('observe', 'change', function(event) {
       var format = dateValueInput.title;
       var month = monthSelect.selectedIndex &gt;= 0 &amp;&amp; monthSelect.options[monthSelect.selectedIndex].value;
       var year = yearSelect.selectedIndex &gt;= 0 &amp;&amp; yearSelect.options[yearSelect.selectedIndex].value;
       if (month &amp;&amp; year) {
          var date = new Date();
          date.setFullYear(year, month, 1);
          if (typeof (SimpleDateFormat) != 'undefined') {
            var formatter = new SimpleDateFormat(format);
            dateValueInput.value = formatter.format(date);
            dateValueInput.alt = date.toISO8601();
            Event.fire(dateValueInput, 'xwiki:date:changed');
          }
       }
    })
  })
});</code>
</property>
<property>
<name>Date Pickers</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>0</number>
<className>XWiki.StyleSheetExtension</className>
<guid>3107f5aa-1450-46df-be7b-af4e79cbe51f</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>#template('colorThemeInit.vm')
/** ----------------------------------------------------------- */
/** Default style fixes **/
#mainContentArea, #mainEditArea {
    background-color: #F9F9F9;
    border: 1px solid #FFFFFF;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);
    margin: 2em 5%;
    padding: 0.5em 10px;
    text-shadow: 1px 1px 0 #FFFFFF;
}
.bottombuttons {
   margin: 3em -10px -3em;
}
#document-head {
  border-bottom: .4em solid $theme.buttonPrimaryBackgroundColor;
  margin: -2.7em -12px 0;
}
#document-head #document-title {
  display: inline-block;
}
#document-head h1 {
    background-color: $theme.buttonPrimaryBackgroundColor;
    border-bottom: 0 none;
    border-radius: 8px 8px 0 0;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);
    color: $theme.buttonPrimaryTextColor;
    display: inline-block;
    font-size: 1.2em;
    letter-spacing: 2px;
    margin: 0 0 -0.4em;
    padding: 0.4em 3em;
    text-shadow: 0 0 1px $theme.buttonPrimaryTextColor;
    text-transform: uppercase;
}
#document-head #document-authors {
  color: $theme.textPrimaryColor;
  display: inline-block;
  font-size: .87em;
  margin-left: 1em;
  padding-top: .6em;
  vertical-align: top;
}
#document-head #document-authors .sep {
  margin: 0 .5em;
}
#document-head #document-authors  .document-creator {
  color: $theme.textColor;
  font-weight: bold;
}
#xwikicontent {
  overflow: visible;
}
.xwiki-form-listclass {
    display: inline-block;
}
.xwiki-form-listclass input[type="radio"][value=""], option[value=""] {
  display: none;
}
.buttonwrapper, .button {
  text-shadow: none;
}
hr {
  border-bottom: 1px solid $theme.pageContentBackgroundColor;
  border-left: 0 none;
  border-right: 0 none;
  border-top: 1px solid $theme.borderColor;
  clear: both;
}
input[type=text], textarea {
  width: 100%;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
  border-radius: 4px;
}
textarea {
  width: 98%;
}
input[type=text]:focus, textarea:focus {
  border-color: $theme.linkColor;
  -moz-box-shadow: 0 0 4px $theme.borderColor;
  box-shadow: 0 0 4px $theme.borderColor;
}
.fullScreenEditLinkContainer {
  display: none !important;
}
.errormessage {
  background-color: $theme.highlightColor;
}
.suggestItems .suggestValue {
  color: $theme.textColor;
}
.suggestItem .related-terms {
  font-size: 100%;
  font-weight: bold;
  float: right;
  margin: .5em 0 0;
  color: $theme.buttonPrimaryTextColor;
  background-color: $theme.buttonPrimaryBackgroundColor;
  -moz-border-radius: 2px;
  -webkit-border-radius: 2px;
  border-radius: 2px;
}
.suggestItem .related-terms a {
  color: $theme.buttonPrimaryTextColor;
  display: inline-block;
  padding: 2px .5em;
}
/** ----------------------------------------------------------- */
/** ----------------------------------------------------------- */
/** Layout **/
.invisible {
  display: none !important;
}
.clear {
  display: block;
  float: none;
  clear: both;
}
.twothird-width {
  width: 67%;
}
.half-width {
  width: 48.5%;
  margin-right: 1%;
  float: left;
}
.half-width+.half-width {
  margin-left: 2%;
  margin-right: 0;
}
.third-width {
  width: 32%;
  float: left;
  margin-right: 1%;
}
/** ----------------------------------------------------------- */
/** Specific form elements **/
.hint {
  color: $theme.textSecondaryColor;
  font-size: 70%;
  padding: 0;
  margin: 0;
  font-style: normal;
}
.chapter, .chapter-inner {
  border: 1px solid $theme.pageContentBackgroundColor;
  border-radius: 0 0 10px 10px;
  box-shadow: 0 0 6px $theme.borderColor inset;
  ##margin: 1em 0;
  margin: 3.5em 0 1em;
  padding: 5px 10px;
  position: relative;
}
.phenotype-info {
  border: 0 none;
  box-shadow: none;
  margin: 0;
  padding: 0;
}
h1, h2, h3, h4 {
  text-shadow: 1px 1px 0 $theme.pageContentBackgroundColor;
}
.chapter h2 {
  ##color: $theme.linkColor;
  ##font-size: 1.5em;##1.2em;
  ####text-transform: uppercase;
  ##font-family: Georgia, serif;
  ##border-bottom: 1px solid $theme.linkColor; ##$theme.borderColor;
  ####border-left: .2em solid $theme.linkColor; ##$theme.borderColor;
  ####padding-left: .2em;
  ####text-shadow: 0 0 1px $theme.textSecondaryColor;
  ####border-radius: 0 0 0 .4em; ##.4em 0 0 0;
  ##cursor: pointer;
  ##margin-top: 0;
  border-bottom: 1px solid $theme.linkColor;
  color: $theme.linkColor;
  cursor: pointer;
  font-family: Georgia,serif;
  font-size: 1.5em;
  margin: -1.5em -10px 0;
  padding-left: 10px;

}
.chapter h2+.hint {
  margin: 1em 0;
}
.chapter h3 {
  font-size: 1.2em;
  text-transform: uppercase;
  margin: 1em 0;
  padding: 0 20px 0 0;
}
.chapter .phenotype-group,
.chapter .negative_phenotype-group {
  padding: 0 1em;
}
.chapter .phenotype-group h3,
.chapter .negative_phenotype-group h3 {
  overflow: visible;
  text-transform: uppercase;
  font-size: 1.1em;
  cursor: pointer;
  margin-left: -1em;
  margin-bottom: .3em;
}
.fieldset .displayed-value p {
  line-height: 1.4em;
  margin: 0;
}
.fieldset .displayed-value {
  margin: 0 0 0.5em;
}
label.selected, label.subterm-selected {
  background-color: $theme.backgroundSecondaryColor;
  background-image: none;
  font-weight: bold;
  padding-left: 4px;
  margin-left: -4px;
  -moz-border-radius: 2px;
  -webkit-border-radius: 2px;
  border-radius: 2px;
}
label.subterm-selected {
  background-image: url("$xwiki.getSkinFile('icons/silk/shading.gif')");
  background-position: 14px center;
  background-repeat: no-repeat;
}
label.subterm-selected input[type="checkbox"] {
  opacity: .2;
}
label.selected input[type="checkbox"] {
  opacity: 1;
}
.wrongValue {
  color: $theme.notificationErrorColor !important;
  font-weight: bold;
}
input.wrongValue {
  border: 1px solid $theme.notificationErrorColor;
  background-color: $theme.highlightColor;
  color: $theme.textColor !important;
  font-weight: normal;
}
/** ----------------------------------------------------------- */
/** Patient info zone **/
.patient-info .fieldset {
  margin: .3em 0 !important;
}
.editbody .patient-info .family_study {
  margin-top: 1.2em ! important;
}
.patient-info .side {
  padding-top: .3em;
}
.editbody .patient-info label.section {
  font-weight: bold;
}
.viewbody .patient-info .label, .viewbody .patient-info label {
  color: $theme.linkColor;
  font-weight: bold;
  display: inline-block;
  width: 33%;
}
.viewbody .family_study .label {
  display: inline;
}
.viewbody .family_study .half-width {
  width: 33%;
}
.viewbody .family_study .half-width * {
  margin: 0 !important;
}
/** ----------------------------------------------------------- */
/** Quick search box &amp; suggest */
.emphasized-box { 
  background: $theme.backgroundSecondaryColor;
  border: 1px solid $theme.backgroundSecondaryColor;
  -webkit-box-shadow: 0 0 4px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.15);
  -moz-box-shadow: 0 0 4px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.15);
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.15);
}
.quick-search-box {
  border: 0 none;
  float: right;
  width: 30%;
  position: absolute;
  top: 0;
  right: 0;
}
.quick-search-box fieldset {
  border: 1px solid $theme.backgroundSecondaryColor;
  padding: .5em .8em;
}
.quick-search-box .section{
  margin: 0.5em 0;
  font-size: 1.2em;
  text-transform: uppercase;
}
/** ----------------------------------------------------------- */
/** PubMed search box &amp; suggest */
.pubmed-search-box {
  width: 42.5% !important;
  position: absolute;
  top: auto;
  bottom: -1.4em !important;
  margin-right: -46% !important;
}
.pubmed-search-box fieldset {
  border: 1px solid $theme.backgroundSecondaryColor;
  padding: .5em .8em;
}
#pubmed-search-history ul {
  max-height: 5em;
  overflow: auto;
  font-size: .8em;
}
#pubmed-search-history h4 {
  margin-bottom: 0;
}
#pubmed-search-history ul li {
  padding-left: 20px;
  background-image: url("$xwiki.getSkinFile('icons/silk/page.gif')");
  background-position: left 2px;
  background-repeat: no-repeat;
}
#pubmed-search-history ul li input{
  display: none;
}
/** ----------------------------------------------------------- */
/** Clinical info zone **/
/** view mode **/
.viewbody .clinical-info .displayed-value {
  padding-left: 8px;
  margin-left: 8px;
  border-left: 2px solid $theme.borderColor;
}
.clinical-info label {
  display: inline-block;
  width: 100%;
}
.value-checked, .viewbody .clinical-info label.section {
  padding-left: 18px;
  background: transparent none left 40% no-repeat;
}
.viewbody .subsection {
  margin-left: 18px;
}
.viewbody .subsection .value-checked {
  background-image: url("$xwiki.getSkinFile('icons/silk/bullet_blue.gif')");
}
/** edit mode **/
.editbody .clinical-info label.section {
  line-height: 1.4em;
}
.editbody .clinical-info .phenotypes-main label.section:before {
  content: "\25bc";
  display: inline-block;
  color: $theme.textSecondaryColor;
  font-size: .75em;
  top: -0.5em;
  text-shadow: 0 0 5px $theme.textSecondaryColor;
  opacity: .3;
}
.chapter div .expand-tools {
  margin-top: -3.5em;
  margin-right: 0;
}
.chapter .expand-tools, .chapter .chapter-inner .expand-tools {
  ####display: block;
  ##float: right;
  ####margin-top: -1.5em;
  ##margin-top: -3.5em;
  ####margin-left: -14px;
  ##font-size: .8em;
  ##color: $theme.textPrimaryColor;
  color: $theme.textPrimaryColor;;
  float: right;
  font-size: 0.8em;
  margin-right: -10px;
  margin-top: -2em;
}
.expand-tools .tool:hover {
  color: $theme.linkColor;
  cursor: pointer;
}
.chapter.collapsed .expand-tools .inner-expand-tools,
.chapter.collapsed .expand-tools .hide,
.chapter.collapsed div,
.chapter.collapsed table,
.chapter .expand-tools .show {
  display: none;
}
.chapter.collapsed .expand-tools .show {
  display: inline
}
.chapter.collapsed div.chapter-inner {
  display: block;
}
.chapter.collapsed #quick-search-box {
  display: block;
}

.phenotype-info .chapter-toc {
  float: right;
  height: 0;
  margin: -5px -10px 0;
  overflow: visible;
  text-align: right;
  position: relative;
}
.phenotype-info .chapter-toc ul {
  list-style-type: none;
  background: $theme.pageBackgroundColor;
  border: 1px solid $theme.borderColor;
  border-radius: 4px 0 4px 4px;
  list-style-type: none;
  margin: 0;
  padding: 0.3em 1em;
  font-size: .8em;
}
.phenotype-info h3 .expand-tool {
  vertical-align: top;
  width: 1em;
  font-size: 1em;
}
.phenotype-group.collapsed *,
.negative_phenotype-group.collapsed * {
  display: none;
}
.phenotype-group.collapsed h3,
.negative_phenotype-group.collapsed h3 {
  display: block;
}
.phenotype-group.collapsed h3 *,
.negative_phenotype-group.collapsed h3 * {
  display: inline;
}
.phenotypes-main {
  position: relative;
}
.phenotypes-main .hint {
  margin-left: 20px;
}
.subsection {
  margin-left: 1.3em;
}
.subsection .phenotypes-main br {
  display: none;
}
.subsection .phenotypes-main label {
  float: left;
  margin: 0 1% 0 0;
  padding: 0 8px;
  width: auto;
  font-weight: normal !important;
}
.subsection .phenotypes-main label.section {
  clear: both;
  display: block;
  float: none;
}
/** -------------------------------------------- **/
/** Suggestions **/
.accepted-suggestions li .delete-tool, .clear-tool {
    background-color: $theme.buttonPrimaryBackgroundColor;
    color: $theme.buttonPrimaryTextColor;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    border-radius: 3px;
    padding: 2px;
}
/** -------------------------------------------- **/
/** Negative phenotypes **/

.negative_phenotype-group h3 {
  color: $theme.notificationErrorColor;
}
.negative_phenotype-group h3 em {
  font-weight: bold;
}
.negative_phenotype-group .infomessage {
  margin-left: -4px;
}
.negative_phenotype-group .phenotypes-main .hint {
  margin-left: 0;
}
.negative_phenotype-group .label-other {
  display: none;
}
.negative_phenotype-group .selected .value, .viewbody .negative_phenotype-group .value-checked , .viewbody .negative_phenotype-group .section {
  text-decoration: line-through;
  color: $theme.notificationErrorColor;
}
/** -------------------------------------------- **/
/** "Unaffected" zone **/
.unaffected label {
  display: inline;
  font-weight: bold;
}
/** --------------------------------------------- **/
/** Charts **/
.chart-wrapper {
  box-shadow: 0 0 6px $theme.borderColor;
  display:inline-block;
  width:32%;
  margin-left:1%;
}</code>
</property>
<property>
<name>Patient sheet UI</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>1</number>
<className>XWiki.StyleSheetExtension</className>
<guid>fb941776-130a-4f84-a7d0-d4db921a0da3</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>#template('colorThemeInit.vm')
table.extradata-list {
    width: 100%;
}
.extradata-list td, .extradata-list th {
    border: 1px solid $theme.backgroundSecondaryColor;
    border-left: 1px solid $theme.pageContentBackgroundColor;
    border-right: 1px solid $theme.pageContentBackgroundColor;
}
.extradata-list th.col-label {
    font-weight: normal;
    font-variant: small-caps;
}
.extradata th.col-label, .viewbody td {
    text-align: center;
}
.viewbody td.comments, .editbody th.comments {
    text-align: left;
    border-right: 0 none;
}
.extradata-list th.row-count {
    background: transparent;
}
.extradata-list th.row-count,
.extradata-list td.start,
.extradata-list td.end {
    text-align: right;
}
.extradata-list td.start,
.extradata-list td.end,
.extradata-list td.band {
    min-width: 6em;
}
.extradata-list th.comments {
    min-width: 20em;
}
.extradata-list .xwiki-form-listclass {
    display: block;
    white-space: nowrap;
}
.extradata-list th.actions {
  width: 24px;
  ## border-left: 0 none;
}
.extradata-list th.actions .buttonwrapper {
    display: block;
    height: 2.3em;
    position: relative;
    margin: 0;
}
.extradata-list th.actions .add-data-button {
    position: absolute;
    right: 0;
}
.list-actions {
  position: relative;
  width: 99%;
}
.list-actions .buttonwrapper {
  text-align: left;
  margin: 0 !important;
}
table.withLabel td, table.withLabel th {
  border: 0 none;
}
table.withLabel tr:first-child th {
  display: none;
}
.extradata-list .bmi, .extradata-list .hc_percentile {
  min-width: 4em;
}
.extradata-list .normal {
  color: $theme.notificationSuccessColor;
}
.extradata-list .extreme-below-normal, .extradata-list .extreme-above-normal {
  color: $theme.notificationErrorColor;
}
.extradata-list .below-normal, .extradata-list .above-normal {
  color: $theme.notificationWarningColor;
}
form .extradata-list tr:hover td {
  background-color: $theme.highlightColor;
}

table.extradata-list td.weight,
table.extradata-list td.height,
table.extradata-list td.bmi,
table.extradata-list td.head_circumference {
  paddingr-left: .5em;
}
table.extradata-list td.date,
table.extradata-list td.bmi_percentile {
  padding-right: .5em;
}
#extradata-list-ClinicalInformationCode\.MeasurementsClass {
  border-collapse: separate;
  border-spacing: 0 0;
}
#extradata-list-ClinicalInformationCode\.MeasurementsClass tr {
  position: relative;
}
#extradata-list-ClinicalInformationCode\.MeasurementsClass td {
  padding-top: 2.5em;
  padding-bottom: .5em;
  border-top: 1px solid $theme.pageContentBackgroundColor;
  border-bottom: 1px solid $theme.borderColor;
}
#extradata-list-ClinicalInformationCode\\.MeasurementsClass tr:first-child+tr td {
  border-top: 0 none;
}
#extradata-list-ClinicalInformationCode\\.MeasurementsClass tr:last-child td {
  border-bottom: 0 none;
}
#extradata-list-ClinicalInformationCode\.MeasurementsClass td.date {
  position: absolute;
  padding-top: 3px;
  padding-bottom: 0;
  border-color: transparent;
}
#extradata-list-ClinicalInformationCode\.MeasurementsClass td.date label.hint {
  font-size: 1em;
  color: $theme.textColor;
  font-weight: bold;
}
#extradata-list-ClinicalInformationCode\.MeasurementsClass td.date input {
  width: 10em;
  margin: 0 0 0 .7em;
}
#extradata-list-ClinicalInformationCode\.MeasurementsClass td.actions {
  padding: 3px;
  position: absolute;
  right: 10px;
  border-color: transparent;
}
#extradata-list-ClinicalInformationCode\.MeasurementsClass td.actions a.delete{
  margin: 0;
  background-image: none;
  width: 1em;
  height: auto;
  text-indent: 0;
  text-align: center;
  color: $theme.buttonPrimaryTextColor;
  text-decoration: none !important;
}</code>
</property>
<property>
<name>Extra data table ui</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>2</number>
<className>XWiki.StyleSheetExtension</className>
<guid>80f1b899-6037-4af3-bf0f-b0187bc83a54</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>#template('colorThemeInit.vm')
/*--------------------------------------------------------------*/
/** Box style */
.ncbi-search-box {
  margin-top: 2em;
}
.ncbi-search-box h3 {
  cursor: pointer;
}
.ncbi-search-box.collapsed h3 {
  color: $theme.linkColor;
}
.ncbi-search-box.collapsed .ncbi-search-box-content,
.ncbi-search-box.collapsed .expand-tools .hide,
.ncbi-search-box .expand-tools .show {
  display: none;
}
.ncbi-search-box.collapsed .expand-tools .show {
  display: inline;
}
/*--------------------------------------------------------------*/
/** Search terms from phenotypes */
.default-search-terms-container {
  margin: .5em 0;
  padding: .5em 1em;
  border: 1px dotted $theme.borderColor;
  background-color: $theme.highlightColor;
}
.search-term {
  margin: 0 1.5em 0 0;
  cursor: pointer;
}
.search-term:hover, .search-term.disabled:hover {
  opacity: .7;
}
.search-term.disabled {
  opacity: .5;
  text-decoration: line-through;
}
/** ----------------------------------------------------------- */
/** PubMed &amp; OMIM suggestions */
.background-suggestions {
  max-height: 15em;
  overflow: hidden;
  padding: 0 16px 0 0.5em;
  border: 1px solid $theme.pageContentBackgroundColor;
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.2), 0 0 20px rgba(0, 0, 0, 0.15) inset;
}
.background-suggestions:hover {
  overflow: auto;
  padding-right: 0;
}
.background-suggestions ul {
  list-style-type: none;
  margin: .5em 0;
}
.background-suggestions li {
  margin: .7em 0;
  font-size: .8em;
  line-height: 1.2em;
  padding-left: 20px;
  background-position: left 2px;
  background-repeat: no-repeat;
}
.background-suggestions .journal {
  font-style: italic;
}
.background-suggestions .locus {
  display: block;
}
.background-suggestions .title {
  font-size: 1.25em;
}
#pubmed-search-results ul li {
  background-image: url("$xwiki.getSkinFile('icons/silk/page.gif')");
}
#omim-search-results ul li {
  ##background-image: url("$xwiki.getSkinFile('icons/silk/chart_line.gif')");
}
#omim-search-results ul li label {
  margin-left: -20px;
}
#omim-search-results ul li label input {
  vertical-align: middle;
}
.background-search h4 {
  font-size: 1.2em;
  margin: 0;
  padding: 0 20px 0 0;
}
.background-search {
  margin-top: 1em;
  background: transparent none right top no-repeat;
}
.background-search.loading, .plainmessage.loading {
  background-image: url("$xwiki.getSkinFile('icons/xwiki/spinner.gif')");
}</code>
</property>
<property>
<name>Instant search style</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<content>{{include document="ClinicalInformationCode.ChartServiceMacros" /}}

{{velocity output=false}}
#macro (__label $propName $cssClass $text)
   #set($displayedText = "$!{text}")
   #if ($displayedText == '' &amp;&amp; "$!{propName}" != '')
     #set($displayedText = "$!{class.get($propName).prettyName}:")
   #end
   #if ($xcontext.action != 'edit')
     (% class="label $!{cssClass}" %)${displayedText}(%%)##
   #else
     #set($for = '')
     #if ("$!{propName}" != '')
       #set($for = "for='$!{class.name}_$!{obj.number}_$!{propName}'")
     #end
     {{html clean="false" wiki="false"}}&lt;label class="$!{cssClass}" $!{for}&gt;${displayedText}&lt;/label&gt;{{/html}}##
   #end
#end

#macro (__display $propName)
(% class="displayed-value"%)(((#if ("$!{doc.display($propName)}" == '')-#else${doc.display($propName)}#end)))##
#end

#macro (__displayIfNotEmpty $propName)
#if ($context.action == 'edit' || ($doc.display($propName) != ''))
#__label($propName '')
#__display($propName)
#end
#end

#macro (__display2Col $propName $label $groupCssClass $labelCssClass)
  (% class="fieldset ${propName} $!{groupCssClass}" %)(((
  (% class="half-width ${propName}" %)(((
    #__label(${propName} "section $!{labelCssClass}" "$!{label}")
  )))
  (% class="half-width ${propName}" %)(((
    #__display(${propName})
  )))
  )))##fieldset
#end

#macro (__displayIfNotEmpty2Col $propName $label $groupCssClass $labelCssClass)
#if ($context.action == 'edit' || $doc.display(${propName}) != '')
#__display2Col($propName $label "$!{groupCssClass}" "$!{labelCssClass}")
#end
#end

#macro(__markIfMandatory $propName)#if ("$!mandatoryFields.contains($propName)" != 'false')mandatory#{end}#end

#macro (__displayHalfWidth $propName $label $groupCssClass $labelCssClass)
  (% class="half-width $groupCssClass ${propName}" %)(((
    #__label(${propName} "hint ${labelCssClass}" $label)
    #__display(${propName}, $obj)
  )))
#end 

#macro (__displayFormatted $mode $propName $label $groupCssClass $labelCssClass)
#if ("$!activeFields.contains($propName)" != 'false' &amp;&amp; ($xcontext.action == 'edit' || $doc.display(${propName}) != ''))
  #if ($xcontext.action != 'edit')
    #if ($mode == 'half-width')
      (% class="displayed-value"%)#if ($propName == 'first_name'),#end ${doc.display($propName)}(%%)##
    #else
      #__label($propName $labelCssClass $label) (% class="displayed-value"%)#if ("$!{doc.display($propName)}" == '')-#else${doc.display($propName)}#end(%%)
    #end
  #else
    #set($_groupCssClass = "$!{groupCssClass} #__markIfMandatory($propName)")
    #if ($mode == 'half-width')
      #__displayHalfWidth($propName $label $_groupCssClass $labelCssClass)
    #elseif ($mode == '2-col')
      #__display2Col($propName $label $_groupCssClass $labelCssClass)
    #else
    (% class="$groupCssClass ${propName}" %)(((
      #__label($propName $labelCssClass $label)
      #__display($propName)
    )))
    #end
  #end## export
#end## field not configured as inactive, field not empty in view mode
#end

#macro (__qsBox $fieldName $cssClass)
#if ($context.action == 'edit')
(% id="quick-search-box"  class="group-other quick-search-box emphasized-box $!{cssClass}" %)(((
  {{html clean="false" wiki="false"}}
  &lt;fieldset&gt;
    &lt;h3 class="section"&gt;Quick phenotype search&lt;/h3&gt;
    &lt;label for="quick-phenotype-search"&gt;Enter a free text and choose among suggested ontology terms&lt;/label&gt;
    &lt;input type='text' name='$!{fieldName}' class='suggested multi suggest-hpo quickSearch' value='' size='16' id='quick-phenotype-search'/&gt;
  &lt;/fieldset&gt;
  {{/html}}
)))
#end
#end

#macro(__ncbiSBox $fieldName $cssClass)
#if ($xcontext.action == 'edit')
(% class="ncbi-search-box $!{cssClass}" %)(((
=== Instant OMIM / PubMed search ===
(% class="expand-tools" %)(((
(% class="tool show" %)Show(%%) (% class="tool hide" %)Hide(%%)
)))
(% class="ncbi-search-box-content"%)(((
(% class="hint"%)The following terms are extracted from the phenotypic description and used automatically in searches. You can disable or re-enable their contribution in OMIM and PubMed search results by clicking on them.(%%)
{{html wiki=false clean=false}}&lt;input type="hidden" id="defaultSearchTermsInput" value="" /&gt;{{/html}}
(% id="defaultSearchTerms" %)(((
)))
(% class="hint"%)Include the following custom terms in your search:(%%)
{{html wiki=false clean=false}}&lt;input type="text" id="customSearchTermsInput" value="" /&gt;{{/html}}
(% class="half-width background-search omim-search" %)(((
==== Matching disorders in OMIM ====
(% id="omim-search-results" class="background-suggestions" %)((()))
)))
(% class="half-width background-search pubmed-search" %)(((
==== Suggested reading on PubMed ====
(% id="pubmed-search-results" class="background-suggestions" %)((()))
)))
)))
)))
#end
#end

## =====================================================================
##
## "Tabelar" data associated with the patient report
##
##
#macro (__extradata_deleteTool $object $anchor)
  {{html}}&lt;a class="action delete" href="$doc.getURL('objectremove', "classname=${object.xWikiClass.name}&amp;amp;classid=${object.number}&amp;amp;xredirect=$escapetool.url($doc.getURL('edit'))&amp;amp;form_token=$!{services.csrf.getToken()}#$!{anchor}")" title="Delete"&gt;âœ–&lt;/a&gt;&lt;/span&gt;{{/html}}##
#end

#macro (__extradata_addTool $classname $anchor)
  {{html}}&lt;span class="buttonwrapper"&gt;&lt;label class="create-button-label"&gt;+&lt;/label&gt;&lt;a class="add button add-data-button" href="$doc.getURL('objectadd', "classname=${classname}&amp;amp;xredirect=$escapetool.url($doc.getURL('edit'))&amp;amp;form_token=$!{services.csrf.getToken()}#$!{anchor}")" title='New entry'&gt;New entry&lt;/a&gt;&lt;/span&gt;{{/html}}#end

#macro (__extradata_displayTable $dataClassName $options)
  #set($dataClass = $xwiki.getDocument($dataClassName).xWikiClass)
  #if ($dataClass)
    #if ($xcontext.action != 'edit' &amp;&amp; $doc.getObjects($dataClassName).size() == 0)
      (% class="hint" %)None specified
    #else
      (% class="extradata-list#if ("$!{options.labels}" == 'true') withLabel#end#if ("$!{options.counter}" == 'true') withCounter#end" id="extradata-list-${dataClassName}" %)
      #if ("$!{options.counter}" == 'true')|=(% class="col-label" %)# #end#foreach($prop in $dataClass.properties)|=(% class="col-label $prop.name" %)$prop.prettyName#end#if ($xcontext.action == 'edit')|=(% class="actions" %)
      #else

      #end
      #if ($xcontext.action == 'export')#set ($disableLabels = true)#end
      #foreach ($o in $doc.getObjects($dataClassName))
        #if ("$!{options.counter}" == 'true')|=(% class="row-count" %)${velocityCount}#end#foreach($prop in $dataClass.properties)|(% class="$prop.name" %)#if ("$!{options.labels}$!{disableLabels}" == 'true'){{html clean="false" wiki="false"}}&lt;label class="hint" &gt;${prop.prettyName}:&lt;/label&gt;{{/html}}#end $doc.display($prop.getName(), $o)#end#if ($xcontext.action == 'edit')|(% class="actions" %)#__extradata_deleteTool($o "extradata-${dataClassName}")#end

      #end## foreach object

      #if ($xcontext.action == 'edit')(% class="list-actions" %)(((#__extradata_addTool($dataClassName "extradata-${dataClassName}"))))
      #end
    #end## if xcontext.action
  #end## if dataclass
#end

#macro (__extradata_displayLastEntry $dataClassName $withLabel)
  #set ($objects = $doc.getObjects($dataClassName))
  #if ($objects.size() &gt; 0)
    #set ($targetObj = $objects.get($mathtool.sub($objects.size(), 1)))
    #set($dataClass = $targetObj.xWikiClass)
    {{html wiki="true" clean="false"}}#foreach($prop in $dataClass.properties)&lt;td class="${prop.name}"&gt;#if ("$!{withLabel}" == 'true'){{html clean="false" wiki="false"}}&lt;label class="hint" &gt;${prop.prettyName}:&lt;/label&gt;{{/html}}#end$doc.display($prop.getName(), $targetObj)&lt;/td&gt;#end#if ($context.action == 'edit')&lt;td class="actions"&gt;#__extradata_deleteTool($targetObj '')&lt;/td&gt;#end{{/html}}
  #end
#end


## =====================================================================
##
## SECTIONS DISPLAY
##
##
#macro(__reportSection_display $sectionName)
  #set($cleanSectionName = $sectionName)
  #set($cleanSectionName = $cleanSectionName.replace('-', '_'))
  #evaluate("#__reportSection__${cleanSectionName}()")
#end

## =================================================================
## Patient information
##
#macro(__reportSection__patient_info)
(% class="twothird-width clear patient-info chapter" %)(((
== Patient Information ==
  #if ("$!activeFields.contains('last_name')" != false &amp;&amp; "$!activeFields.contains('first_name')" != false)
  (% class="fieldset" %)(((
    #__label('last_name' 'section clear' 'Patient name:')
    #__displayFormatted('half-width' 'last_name')
    #__displayFormatted('half-width' 'first_name')
  )))##fieldset
  #end## display first name / last name
  #__displayFormatted('2-col' 'date_of_birth' '' 'date' '')
  #__displayFormatted('2-col' 'gender' 'Sex:' 'gender' 'group-title')
  #__displayFormatted('2-col' 'health_card' '' '' '')

#if ("$!activeFields.contains('relative')" != 'false' &amp;&amp; ($context.action == 'edit' || ($doc.display('relative') != '' &amp;&amp; $doc.display('relative_of') != '')))
  ----
  (% class="fieldset family_study" %)(((
  #if ($xcontext.action == 'edit')
    (% class="half-width relative" %)(((
  #end
    #__label('' 'section' 'Family study:') $doc.display('relative') #__label('relative_of' 'section' 'of')
  #if ($xcontext.action == 'edit')
    )))
  #end
    #__displayFormatted('half-width' 'relative_of' "$!{config.getProperty('relativeReportHint').value}" '' 'hint')##
  )))##fieldset
#end

#if ("$!activeFields.contains('onset')" != 'false')
  #if ($context.action == 'edit')
  ----
    $doc.display('onset')
  #else
    #__displayFormatted('2-col' 'onset' '' '' 'section')
  #end
#end
(% class="clear" %)((()))
#if ("$!activeFields.contains('indication_for_referral')" != 'false')
#__displayIfNotEmpty('indication_for_referral')
#end
)))##chapter
#end

## =================================================================
## Measurements
##
#macro(__reportSection__measurements)
#set ($targetClassName = 'ClinicalInformationCode.MeasurementsClass')
#if ($config &amp;&amp; $config.getProperty('section__measurements').value.contains($targetClassName) &amp;&amp; ($xcontext.action == 'edit' || $doc.getObject($targetClassName)))
(% class="twothird-width clear measurement-info chapter" %)(((
== Measurements ==
#__extradata_displayTable($targetClassName, {'counter' : false, 'labels' : true})
#if ($xcontext.action != 'export' &amp;&amp; $config.getProperty('section__measurements').value.contains('growth-charts'))
(((
=== Growth charts ===
(% id="charts"%)(((
#set($chartOptions = {'targetClassName' : $targetClassName, 'obj': $obj, 'link': true})
#_measurementCharts($chartOptions)
)))##charts
)))
(% class="clear"%)((()))
#end
)))##chapter
#end
#end

## =================================================================
## Phenotype information
##
#macro(__reportSection__phenotype_info)
#if ($xcontext.action == 'edit' || "$doc.display('unaffected')$doc.display('phenotype')$doc.display('negative_phenotype')" != '')
#if ("$!activeFields.contains('unaffected')" != 'false')
  (% class="controlled-group complete-hide" %)(((
#end
#if ("$!activeFields.contains('phenotype')" != 'false')
  (% class="clear clinical-info phenotype-info chapter" %)(((
  #if ("$!activeFields.contains('unaffected')" != 'false')#set ($__qsBoxCssClass = 'controlled')#end
  #__qsBox("$!{class.name}_$!{obj.number}_phenotype" "$!{__qsBoxCssClass}")
    (% class="twothird-width chapter-inner" %)(((
    (% class="group-title" %)
    == $!{class.get('phenotype').prettyName} ==
      #if ("$!activeFields.contains('unaffected')" != 'false')
        (% class="fieldset unaffected controller exclude" %)(((
        #if ($xcontext.action == 'edit')
          $doc.display('unaffected') #__label('unaffected' '' "$class.get('unaffected').prettyName")

          (% class="hint controlled" %)Or select observed phenotypes:(%%)
        #else
          #if ($doc.display('unaffected') == 'Yes')$class.get('unaffected').prettyName#end
        #end
        )))
        (% class="controlled" %) (((
      #end
        (% class="phenotype  #__markIfMandatory('phenotype')" %)(((
          $doc.display('phenotype')##
        )))
          #if ("$!activeFields.contains('negative_phenotype')" != 'false')
            (% class="negative-phenotype  #__markIfMandatory('negative_phenotype')" %)(((
              $doc.display('negative_phenotype')
            )))## negative_phenotype
          #end
      #if ("$!activeFields.contains('unaffected')" != 'false')
        )))## controlled (phenotype)
      #end
        )))## chapter-inner
  )))## chapter
#end
#if ("$!activeFields.contains('unaffected')" != 'false')
  )))## controlled-group
#end
#end## section has content
#end

## =================================================================
## Prenatal information
##
#macro(__reportSection__prenatal_phenotype_info)
#if ("$!activeFields.contains('prenatal_phenotype')" != 'false' &amp;&amp; ($xcontext.action == 'edit' || "$doc.display('prenatal_phenotype')$doc.display('gestation')$doc.display('prenatal_comments')" != ''))
(% class="twothird-width clear clinical-info prenatal_phenotype-info chapter #__markIfMandatory('prenatal_phenotype')" %)(((
== $!{class.get('prenatal_phenotype').prettyName} ==
#__displayFormatted('2-col' 'gestation' '' '' '')
(% class="clear" %)(((----)))
$doc.display('prenatal_phenotype')
#if ("$!activeFields.contains('prenatal_comments')" != 'false')
(% class="clear" %)(((----)))
(((#__displayIfNotEmpty('prenatal_comments'))))
#end
)))##chapter
#end
#end

## =================================================================
## Family history
##
#macro(__reportSection__family_history)
#if ("$!activeFields.contains('family_history')" != 'false' &amp;&amp; ($xcontext.action == 'edit' || "$doc.display('family_history')$doc.display('family_comments')$doc.display('pedigree')" != ''))
(% class="twothird-width clear clinical-info family_history-info chapter #__markIfMandatory('family_history')" %)(((
== $!{class.get('family_history').prettyName} ==
(((
$doc.display('family_history')
#__displayIfNotEmpty('family_comments')
#if ("$!activeFields.contains('pedigree')" != 'false' &amp;&amp; ($xcontext.action == 'edit' || "$doc.display('pedigree')" != ''))

=== Pedigree ===
$doc.display('pedigree')
#end
)))
)))##chapter
#end
#end

## =================================================================
## Medical history
##
#macro(__reportSection__medical_history)
#if ("$!activeFields.contains('medical_developmental_history')" != 'false' &amp;&amp; ($xcontext.action == 'edit' || "$doc.display('medical_developmental_history')$doc.display('reports_history')" != ''))
(% class="twothird-width clear clinical-info medical_history-info chapter #__markIfMandatory('medical_history')" %)(((
== $!{class.get('medical_developmental_history').prettyName} ==
(((
#__displayIfNotEmpty('medical_developmental_history')
#if ($xcontext.action != 'export' &amp;&amp; "$!activeFields.contains('reports_history')" != 'false' &amp;&amp; ($xcontext.action == 'edit' || "$doc.display('reports_history')" != ''))

=== Previous medical reports ===
$doc.display('reports_history')
#end
)))
)))##chapter
#end
#end

## =================================================================
## Diagnosis information
##
#macro(__reportSection__diagnosis_info)
#if ("$!activeFields.contains('omim_id')" != 'false' &amp;&amp; ($xcontext.action == 'edit' || "$doc.display('omim_id')$!doc.display('comments')" != ''))
(% class="clear chapter twothird-width" %)(((
##(% class="diagnosis-info"%)(((
== Diagnosis ==
#__displayIfNotEmpty2Col('omim_id' '' '' '')
(% class="clear" %)(((#__displayIfNotEmpty('comments'))))
##)))
#__ncbiSBox("$!{class.name}_$!{obj.number}_phenotype" '')
(% class="clear" %)((()))
)))##chapter
#end
#end

## =================================================================
## Variants information
##
#macro(__reportSection__variant_info)
#set ($targetClassName = 'ClinicalInformationCode.VariantClass')
#if ($config &amp;&amp; $config.getProperty('section__variant-info').value.contains($targetClassName) &amp;&amp; ($xcontext.action == 'edit' || $doc.getObject($targetClassName)))
(% class="clear variant-info chapter" %)(((
== Variants ==
#__extradata_displayTable($targetClassName, {'counter' : true, 'labels' : false})
)))##chapter
#end
#end

##
## =====================================================================
{{/velocity}}

{{velocity}}
#if ("$!{request.xaction}" == 'lastentry')
  #__extradata_displayLastEntry($request.dataClassName $request.withLabel)
#else
#if ($xcontext.action != 'export')
(% id="table-of-contents" %)(((
{{toc /}}

(% class="hide-toc" id="hide-toc" %)((([[Ã—&gt;&gt;#tmToC||title="Hide table of contents"]])))

(% class="hide-toc hide-toc-ghost" %)((([[Hide table of contents&gt;&gt;#tmToC||id="tmHideToC" class="document-action" title="Hide table of contents"]])))
)))

#end
$xwiki.ssx.use('XWiki.DateTimePicker', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('XWiki.DateTimePicker')##
$xwiki.ssx.use('ClinicalInformationCode.Skin', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.ssx.use('ClinicalInformationCode.Widgets', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('ClinicalInformationCode.Widgets')##
$xwiki.ssx.use('ClinicalInformationCode.PatientSheetUI', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('ClinicalInformationCode.PatientSheetUI')##
##
##
#set($config = $xwiki.getDocument("${doc.space}.WebHome").getObject('ClinicalInformationCode.DBConfigurationClass'))
#if ($config)
#set($obj = $doc.getObject("$!{config.getProperty('patientClass').value}"))
#set($class = $obj.xWikiClass)
#set($discard = $doc.use($obj))
#set($activeFields = $!{config.getProperty('activeFields').value})
#set($mandatoryFields = $!{config.getProperty('mandatoryFields').value})
{{include document="ClinicalInformationCode.PatientSheetMenu" /}}

#if ($context.action == 'edit')
#set($previewenabled = false)
{{html clean="false" wiki="false"}}&lt;input type='hidden' id='prefix' value='$!{class.name}_$!{obj.number}_'/&gt;{{/html}}##

#end
#else

{{warning}}**Configuration missing**{{/warning}}
#end
#end
{{/velocity}}</content></xwikidoc>
